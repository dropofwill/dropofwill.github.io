<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dropofwill's Blog</title>
  <subtitle>All Posts</subtitle>
  <id>http://dropofwill.herokuapp.com/</id>
  <link href="http://dropofwill.herokuapp.com/"/>
  <link href="http://dropofwill.herokuapp.com/feed.xml" rel="self"/>
  <updated>2015-11-19T13:09:00-05:00</updated>
  <author>
    <name>Will Paul</name>
  </author>
  <entry>
    <title>Pacing and character in McConaughey’s performance in Mud</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/pacing-and-character-in-mcconaugheys-performance-in-mud/"/>
    <id>http://dropofwill.herokuapp.com/2015/pacing-and-character-in-mcconaugheys-performance-in-mud/</id>
    <published>2015-11-19T13:09:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;!--
Contrast an actor/actress from this film with an actor/actress from a previous film and how their styles complement or contrast with the context of the film.

The pace of the film is the pace of Mud

Intro
Nichol's introduces us to mud in a mystical meandering way
This causes the film to lag a bit, but intentionally so
A stark comparison would be Nicholson's performance in One Flew over the Cuckoos Nest

Though
Visually you could hardly think of two different films, with One Flew Overs clean cut, everyone dressed in white with Mud where you can almost feel the gritty texture come right through the screen.
--&gt;

&lt;p&gt;Nichols’ &lt;em&gt;Mud&lt;/em&gt; (2013) really is a film driven by its namesake (played by McConaughey). Even though his storyline is just one of many as seen by the film’s young protagonist Ellis (played by Sheridan), this meandering tale of southern Arkansas life delivers us a narrative that parallels Mud’s own delivery, rambling, rough edges and all.&lt;/p&gt;

&lt;p&gt;While McConaughey definitely steals the spotlight with his classic southern drawl and an almost tangible grit, Nichols does his part introducing him as an almost mythical figure, appearing out of nowhere by way of a camera pan (8:58) with a wry smile and wave (9:06). Nichols keeps this motif up throughout the film, Mud does not enter or leave, only appears and disappears via cut or pan. In one sense it makes him feel ethereal and in another it shows how he well he blends in with his namesake: the muddy river and its particular way of life.&lt;/p&gt;

&lt;p&gt;While this does give an engaging voice to an otherwise simple story, at times it makes the film lag as scenes go on for those extra few seconds and the lines are a bit more slow and deliberate than we expect. But looking back this seems to be a conscious choice. Nichols used this to portray a different aspect of this dying way of life (hinted at by the film’s ending with the move to suburban apartment life) and also as a reaction to the Hollywood typical fast-paced cuts.&lt;/p&gt;

&lt;p&gt;All in all, &lt;em&gt;Mud&lt;/em&gt; is excellent collaboration between Nichols and McConaughey (not to mention the excellent performance of the two child actors), probably the best that either have accomplished to date. My only complaint is that it wraps story up a little too neatly at the end, but maybe that too plays into Mud’s mythic narrative.&lt;/p&gt;

&lt;p&gt;9/10&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Leitmotif and comedic relief in Kubrick's Dr. Strangelove</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/leitmotif-in-dr-strangelove/"/>
    <id>http://dropofwill.herokuapp.com/2015/leitmotif-in-dr-strangelove/</id>
    <published>2015-10-28T23:29:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;!--

Leitmotif

Pick a scene. Identify color and sound amplify the effect of the moment. In the course of discussion cite an example of leitmotif that supports/detracts from the given scene:

* Montage of nuclear bombs going off with romantic music in the background
  Intro scene of planes being refueled, shows the coming of full circle the sexual innuendos between man and weapons of war.

* B52 crew and the Johnny comes marching home music.
  Scenes like the Major riding the atomic bomb to the ground.

Music in Dr. Strangelove is often jarringly juxtaposed with the thematic elements of the scene it is placed giving it its ridiculous, comedic effect.

Intro
* Musical elements
*

--&gt;

&lt;p&gt;The prevailing theme of Kubrick’s Dr. Strangelove (1964) is a comedic (though certainly dark) outlook on the ‘strange love’ world leaders have with the game of nuclear warfare. This is built up in the film in every way from subtle visual innuendos to the obvious like names of the characters like General Jack Ripper. Kubrick uses this juxtaposition not only to make a statement about the perversion of Cold War politics of his day, but also to give the film some of its best comedic elements, which often pop-up right at the least funny plot points. One such scene that stood out for me was Major ‘King’ Kong’s last valiantly effort to drop their nuclear payload while giving up his own life, unwittingly wiping out the whole world.&lt;/p&gt;

&lt;p&gt;Obviously, this somber sounding scene does not seem like a good moment for humour, but Kubrick manages to turn this plot point into one of the funniest moments of the film. One way he manages to lighten the mood throughout the film is the recurring use of pop music to add a cheerful and sometimes even ironic tone to a scene (e.g. the song &lt;em&gt;We’ll Meet Again&lt;/em&gt; playing over a montage of the world exploding). For the scenes with Major Kong’s crew in particular Kubrick has already established a leitmotif of a marching band’s rendition of &lt;em&gt;When Johnny Comes Marching Home&lt;/em&gt;. This obviously accomplishes the purpose of alerting the audience to the change of cast and scenery, but since the film does not have any other strong musical settings, so obviously Kubrick had other reasons for making it such a strong element for this crew.&lt;/p&gt;

&lt;p&gt;The key to this lies in the lyrics, unsung in this rendition, of the song:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;When Johnny comes marching home again
  Hurrah! Hurrah!
We'll give him a hearty welcome then
  Hurrah! Hurrah!
The men will cheer and the boys will shout
The ladies they will all turn out
  And we'll all feel gay
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first it seems like this may just be a reference to the crew’s mission paralleling that of the ‘Johnny’ archetype in the song. But as the plot progresses it becomes apparent that Major King’s crew probably will not be ‘marching home’ at the end and that Kubrick is playing with the irony of the situation again.&lt;/p&gt;

&lt;p&gt;Looking at the music from this perspective it really works well with some of the more playful elements in the scene. For example during the shot at 1:27:07 the bombs have hand written notes on them, as if they serve as the start to a cheerful conversation (‘HI THERE!’) or a love letter (‘DEAR JOHN’). The song continues playing right up until Major Kong reaches the point of no return and drops out of bay riding the nuke rodeo style (1:27:18) triggering a somehow comedic end to the world.&lt;/p&gt;

&lt;p&gt;7.5/10&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Establishing narrative control in Freer's High Fidelity</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/establishing-narrative-control-in-freers-high-fidelity/"/>
    <id>http://dropofwill.herokuapp.com/2015/establishing-narrative-control-in-freers-high-fidelity/</id>
    <published>2015-09-29T21:57:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;!--
Reality

So as Rob's narcissism and poor treatment of Laura is introduced we, like Laura's friend Liz, feel betrayed by Rob, which is of course followed by more extended Rob face time as he tries to put his actions in a better light.

--&gt;

&lt;p&gt;In the film &lt;em&gt;High Fidelity&lt;/em&gt; (2000) director Stephen Freer takes on the challenging task of adapting a novel that is effectively a collection of inner-monologues and setting them into the visual reality of film. Thematically it covers a lot of ground as it progresses, but one theme that seems to underlie the whole narrative is control over your reality, more specifically the struggle to remain relevant as a lover and a critic in a world of women and musicians and women musicians. For this to hold our interest it needs to develop a close, empathetic relationship between us and the protagonist Rob, otherwise his rather narcissistic outlook on life would be too grating. At the same time from a thematic standpoint it was important to establish that Rob was at least in control of this narrative, if nothing else.&lt;/p&gt;

&lt;p&gt;Despite the fact that directors can exact complete control over a scene, the medium still proffers a sort of omniscient perspective of the world, i.e. pictures are viewed as objective by default. A common way to break this perspective is to introduce a diegetic narrator to voice over or lead us through scenes, showing that this visual is dependent on the narrator’s own perception. A good example of this is Malick’s &lt;em&gt;Badlands&lt;/em&gt;, which moves through scenes with the guidance of the dreamy, drawl of its teenage protagonist. Freer uses this technique in &lt;em&gt;High Fidelity&lt;/em&gt; to handle flashbacks as the protagonist recounts his top 5 worst breakups.&lt;/p&gt;

&lt;p&gt;However, for the most part Freer uses a different technique to give the film its unique perspective. For example, when the music of the opening titles fades into the scene by way of the wire of Rob’s headphones Freer is leading us through a tightly framed shot from the external world into Rob’s internal world. When the scene settles in on Rob’s face he begins to start a dialogue, not with anyone in the film, but with us the viewer. Freer accomplishes this by framing the shot such that it is just Rob and his headphones staring into the camera (0:59) as he talks for almost 30 seconds uncut, until Rob’s latest break up is introduced by way of yanking the headphone jack out (1:34), snapping us and Rob back into reality.&lt;/p&gt;

&lt;p&gt;It’s this unique choice of framing combined with Rob looking right at us that, pulls us in and out of the scene that keeps the pace of the movie engaging and the discovery of Rob’s shortcomings all the more painful.&lt;/p&gt;

&lt;p&gt;8.5/10&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>A Scanner Orderly: The smart coaster</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/a-scanner-orderly-the-smart-coaster/"/>
    <id>http://dropofwill.herokuapp.com/2015/a-scanner-orderly-the-smart-coaster/</id>
    <published>2015-05-19T22:04:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;What if you could order drink with your coaster? This blog post explains how we made one using an Arduino and Node.js.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/dropofwill/a-scanner-orderly-embed"&gt;Arduino Source Code&lt;/a&gt; (BSD 3, with GPL libraries)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/dropofwill/a-scanner-orderly-web"&gt;Node Source Code&lt;/a&gt; (BSD 3)&lt;/p&gt;

&lt;h2 id="team"&gt;Team&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://github.com/JosephCoppola"&gt;Joe Coppola&lt;/a&gt;: Mechanical Engineer&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://github.com/Petroochio"&gt;Peter Gyory&lt;/a&gt;: Electrical Engineer&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://github.com/dropofwill"&gt;Will Paul&lt;/a&gt;: Software Engineer&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;Advisor:&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;James Wagoner: Actual Engineer&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id="design-overview"&gt;Design Overview&lt;/h2&gt;

&lt;p&gt;A general problem with work is that we are often asked to put our mental energy towards multiple tasks at once. Often times people will say that they are good at multi-tasking, but research has shown that multitasking leads to severe bottlenecking in planning actions and information retrieval from memory.&lt;/p&gt;

&lt;p&gt;Enter the bar domain, a common problem, especially for busy bars, is that the bartenders are asked to manage the ordering, making, and paying for the drinks all while managing a mental queue of what to work on next. This leads to long waits and a struggle to get the bartenders attention. Our idea is to automate the ordering and queuing process, with an eye towards the payment process, to let the bartenders focus on what they do best: make drinks.&lt;/p&gt;

&lt;p&gt;To achieve this we envisioned a smart coaster, which each patron would receive upon entry and would serve as their primary method of ordering drinks. Underneath the top of the coaster was a Force Resistant Sensor (FSR), which would allow the user to perform selection and detect when a drink arrived.Along the inner edge of the coaster a strand of LEDs were placed to give the user feedback on the state of their interaction with the coaster and the state of their drink. The coaster itself was 3D printed with translucent plastic so that the lights can shine through.&lt;/p&gt;

&lt;p&gt;On the bottom of the coaster we needed some sort of menu reader. We looked into barcode scanners, cameras, RFID tags, but all were either too expensive or too bulky for our needs, so we ended up going for an RGB sensor to be paired with a color-coded menu. For this prototype we decided to limit the options to ordering Highballs, which are two-part mixed drinks composed of one spirit and one mixer. One benefit of the RGB sensor we chose was that it had its own light source, so it can work even in a dark bar. While the sensor was actually surprisingly accurate we decide to limit the menu to just 3 spirits and 3 mixers for simplicity.&lt;/p&gt;

&lt;h2 id="pics"&gt;Pics&lt;/h2&gt;

&lt;p&gt;Top of the coaster:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Top of the coaster" src="https://raw.githubusercontent.com/dropofwill/a-scanner-orderly-web/master/design/images/top.JPG" /&gt;&lt;/p&gt;

&lt;p&gt;Bottom of the coaster:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Bottom of the coaster" src="https://raw.githubusercontent.com/dropofwill/a-scanner-orderly-web/master/design/images/bottom.JPG" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="The coaster lit up" src="https://raw.githubusercontent.com/dropofwill/a-scanner-orderly-web/master/design/images/lit_up.jpg" /&gt;&lt;/p&gt;

&lt;h2 id="videos"&gt;Videos&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/128517905" width="500" height="282" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/128517905"&gt;Shows selecting the spirit&lt;/a&gt; from &lt;a href="https://vimeo.com/user37593906"&gt;Will Paul&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/128516073" width="500" height="282" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/128516073"&gt;Shows selecting the mixer and waiting transition&lt;/a&gt; from &lt;a href="https://vimeo.com/user37593906"&gt;Will Paul&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="supplies"&gt;Supplies&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Small Arduino, we used a Flora&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3 * 3D prints for the coaster&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Adafruit RGB Sensor&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;16 Adafruit Neopixels in a strip&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stuff to make a Force Resistance Sensor, we used:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;2 Sheets of aluminum foil&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;2 Sheets of laminate&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;1 sheet of Velostat/Polymer&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Solder&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Glue / Electrical Tape&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Resistors / Wires&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="construction"&gt;Construction&lt;/h2&gt;

&lt;p&gt;Inside of the coaster:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Inside of the coaster" src="https://raw.githubusercontent.com/dropofwill/a-scanner-orderly-web/master/design/images/inside.JPG" /&gt;&lt;/p&gt;

&lt;p&gt;The coaster itself consists of three 3D printed parts, the bottom (which has the sides, a ledge for the other two parts just large enough for the strand of LEDS, and a custom fit whole/dip for our RGB sensor), the middle part (which was just a small sheet of plastic for the FSR to set on) and the top (which was cut to fit right on the ledge and a special cutout so that the wire from connecting to the FSR didn’t cause it to bulge). In the end we also added little bits of cardboard for extra support against the FSR (so that it would be more responsive), and this should probably be added to the print for future additions. Also the FSR ended up being thicker than we thought, so in future prints we would make that divot a little deeper so that it fits together a bit tighter.&lt;/p&gt;

&lt;p&gt;All the internal connections were soldered and since there wasn’t really room for a breadboard all the circuits were made with just wires and resistors. To keep everything insulated we made extensive use of electrical tape and hot glue (for stuff that electrical tape wouldn’t stick to).&lt;/p&gt;

&lt;h2 id="code"&gt;Code&lt;/h2&gt;

&lt;p&gt;We had communication in both directions between the Arduino (potentially multiple) and the Express Node Server using the Serial port and communicated between the server and the (potentially multiple) clients using web sockets so that the page didn’t have to be refreshed to display updates.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Arduino(s) &amp;lt;-&amp;gt; Node Server &amp;lt;-&amp;gt; Clients
         Serial         Socket.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We used the Node &lt;a href="https://github.com/voodootikigod/node-serialport"&gt;&lt;code&gt;serialport&lt;/code&gt;&lt;/a&gt; library to handle communication between the server and Arduino. It worked by polling the clients serial ports for any device that was sending the message ‘Connect’, which was what our coaster sends out until it gets the “$” sign response from the server (we chose “$” because it was single byte ASCII character that signifies end of string in Regex, so it seemed an appropriate way to close a message).&lt;/p&gt;

&lt;p&gt;Since there is always a high possibility of data getting lost/missed in Serial communication we implemented a UDP-esque approach where we just keep sending the message until the receiver tells us they have received it.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Arduino &amp;lt;-&amp;gt; Server &amp;lt;-&amp;gt; Clients

# Sends 'Connect' until server responds
A -&amp;gt; S  "Connect"
...
"$" A &amp;lt;- S

# Sends a drink JSON string after the user selects their drink
# Sends until server responds
A -&amp;gt; S "{\"drink\": [0,0]}" -&amp;gt; C
...
"$" A &amp;lt;- S

# Send a message that the bartender has started the drink
"start" A &amp;lt;- S &amp;lt;- C
...
"$" S -&amp;gt; A -&amp;gt; C

# Send a message that their drink is on its way
"ready" A &amp;lt;- S &amp;lt;- C
...
"$" S -&amp;gt; A -&amp;gt; C

# Sends a message to the server that the drink has arrived
A -&amp;gt; S  "Done"
...
"$" A &amp;lt;- S

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Obviously, a wired coaster isn’t going to work in a real world environment, but the proof-of-concept is there. With a Wifi module, a 5 volt Arduino (instead of our 3.3v Flora), and a small battery pack along with some slight modifications to the model we think it could work pretty well.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>rtasklib first release</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/rtasklib-first-release/"/>
    <id>http://dropofwill.herokuapp.com/2015/rtasklib-first-release/</id>
    <published>2015-05-19T10:31:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;So the semester has come to a close and I’ve made the first ‘official’ release of &lt;code&gt;rtasklib&lt;/code&gt;. Install the gem &lt;a href="https://rubygems.org/gems/rtasklib"&gt;from RubyGems.org&lt;/a&gt; (&lt;code&gt;gem install rtasklib&lt;/code&gt;) or &lt;a href="https://github.com/dropofwill/rtasklib/tree/master/rpms"&gt;install the RPM on your Fedora system if you prefer&lt;/a&gt;. I reached out to the TaskWarrior devs and they also are adding &lt;code&gt;rtasklib&lt;/code&gt; to the list of &lt;a href="http://taskwarrior.org/tools/#libraries"&gt;available libraries on the TaskWarrior main website in the next few days&lt;/a&gt;, which is pretty cool.&lt;/p&gt;

&lt;p&gt;Unfortunately, I was unable to finish &lt;code&gt;task_time&lt;/code&gt; for the end of the semester. That said the pieces are in place and I hope to get something out over the summer.&lt;/p&gt;

&lt;p&gt;All in all it was good learning experience. I don’t often tread that far away from Web Dev, despite the fact that I spend a good part of my day on the command line. It’s also the first time I’ve went through the process of actually releasing one of the gems I’ve made to RubyGems, so that was a good experience. Packaging for RPMs was a lot less easy and made appreciate the Ruby system a lot more than I did previously.&lt;/p&gt;

&lt;p&gt;If anyone in the future needs to package up a Ruby Gem, I stumbled upon this random post on &lt;a href="https://gitlab.com/fedora-ruby/gitlab-rpm/wikis/rubygem-packaging"&gt;Fedora’s GitLab&lt;/a&gt;, which was invaluable in just understanding the process from someone that obviously has done this quite a bit (and also not a first page Google result). Also, the &lt;a href="https://github.com/fedora-ruby/gem2rpm"&gt;gem2rpm&lt;/a&gt; gem (from Fedora) is pretty good at extracting as much meta data as it can from the Ruby .gemspec, but you have to do quite a bit more to get a working RPM (especially if you have many Gem dependencies).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Packaging Ruby gems</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/packaging-ruby-gems/"/>
    <id>http://dropofwill.herokuapp.com/2015/packaging-ruby-gems/</id>
    <published>2015-05-10T11:46:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;In the Ruby community the most common way to distribute software is in a packaged format cutely named gems (similar to the Python concept of Eggs). This manages dependencies and meta data much like the other packaging platforms, but with Ruby syntax in a file called ‘#{you_gems_name}.gemspec’. This process is completely automated through the Ruby gems, &lt;code&gt;gem&lt;/code&gt; (installation/RubyGems.org integration), &lt;code&gt;bundler&lt;/code&gt; (dependency management and boiler plate code), and &lt;code&gt;rake&lt;/code&gt; (Ruby make, to streamline the process). So the release process is as simple as updating the metadata (version number, and any changelog, or whatever) and running &lt;code&gt;rake build&lt;/code&gt;, &lt;code&gt;rake release&lt;/code&gt;. From there anyone with a working Ruby install and internet connection can simply run &lt;code&gt;gem install #{your_gem_name}&lt;/code&gt;. They could also take the local gem created by &lt;code&gt;rake build&lt;/code&gt; and &lt;code&gt;gem install #{path/to/gem}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This makes sense for my &lt;code&gt;rtasklib&lt;/code&gt; library, because it is really only useful for people who are already using Ruby and are familiar with its conventions. But what about for &lt;code&gt;task_time&lt;/code&gt;? In an ideal world users wouldn’t even have to know that it runs on Ruby. Luckily Fedora has &lt;a href="https://fedoraproject.org/wiki/Packaging:Ruby?rd=Packaging/Ruby"&gt;an extensive guide&lt;/a&gt; for packaging gems into RPMs. It makes the distinction between gems used as libraries (like &lt;code&gt;rtasklib&lt;/code&gt;), gems used as applications (like &lt;code&gt;task_time&lt;/code&gt;), Ruby scripts not in the gem format. The plan is to release both libraries on &lt;a href="https://rubygems.org/profiles/dropofwill"&gt;RubyGems.org/profiles/dropofwill&lt;/a&gt; so that they will be internet accessible, as well as a library RPM package for &lt;code&gt;rtasklib&lt;/code&gt; and an application RPM package for &lt;code&gt;task_time&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>rtasklib update</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/rtasklib-update/"/>
    <id>http://dropofwill.herokuapp.com/2015/rtasklib-update/</id>
    <published>2015-04-20T10:36:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;In the Ruby world the most common way to generate documentation is with &lt;a href="http://yardoc.org"&gt;Yardocs&lt;/a&gt;. It basically generates documentation by scraping the code comments and provides a structured API for writing comments that it can interpret. For example to annotate that a parameter of a certain method is a duck type that responds to &lt;code&gt;#to_s&lt;/code&gt; (to string), you would simply make a comment above the method definition that says: &lt;code&gt;# @param parameter_name [#to_s] a parameter that responds to #to_s&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I’ve started the process of documenting everything (currently at 45.76% documented, according to Yard’s statistics) and posting it to the Github page for the rtasklib repo, which you can access &lt;a href="http://will-paul.com/rtasklib/"&gt;here&lt;/a&gt; or from the readme. Here’s the documentation for the &lt;a href="http://will-paul.com/rtasklib/Rtasklib/Taskrc.html"&gt;Taskrc class for example&lt;/a&gt;. To speed up this process I found a Python utility that does the generation, called &lt;code&gt;ghp-import&lt;/code&gt;, which switches to the gh-pages branch, generates the docs, makes a commit, and pushes it to the repo.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Playing power chords on an Arduino</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/playing-power-chords-on-an-arduino/"/>
    <id>http://dropofwill.herokuapp.com/2015/playing-power-chords-on-an-arduino/</id>
    <published>2015-04-13T21:13:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;Play power chords with an Arduino, capacitive touch pads, and a couple of speakers.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Source code available on &lt;a href="https://github.com/dropofwill/multi_tone_arduino"&gt;Github&lt;/a&gt;. It includes the necessary libraries to make it run: the Adafruit MPR121 breakout board code and the external Tone library hosted on Google Code (which has reached end of service).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Team&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://github.com/JosephCoppola"&gt;Joe Coppola&lt;/a&gt;: Electrical Engineer&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://github.com/Petroochio"&gt;Peter Gyory&lt;/a&gt;: Seamstress / Faux-musician&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://github.com/dropofwill"&gt;Will Paul&lt;/a&gt;: R&amp;amp;D&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id="supplies"&gt;Supplies&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Adafruit Uno (other Arduinos will work)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Adafruit Breakout MPR121&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Conductive/regular thread and needle&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Conductive fabric (just a little bit for the fingers)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pipe cleaners&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Wire and Alligator Clips&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Soldering tools &amp;amp; supplies&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="schematic"&gt;“Schematic”&lt;/h2&gt;

&lt;p&gt;Relatively simple wiring job, we used the same soldering job from our last use of the capacitive touch breakout board, but if you haven’t soldering it is a must as intermittent connectivity causes the Arduino to crash. If your speakers are louder just throw on a couple of resistors inline with the speakers.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Rough Schematic" src="https://raw.githubusercontent.com/dropofwill/multi_tone_arduino/master/pics/schematic.jpg" /&gt;&lt;/p&gt;

&lt;h2 id="what-it-looks-and-sounds-like"&gt;What it looks and sounds like&lt;/h2&gt;

&lt;p&gt;A look at the wiring job. The third middle speaker was not used in the final product (the Uno only had two timers that we could use for playing simultaneous sounds).&lt;/p&gt;

&lt;p&gt;&lt;img alt="The breadboard" src="https://raw.githubusercontent.com/dropofwill/multi_tone_arduino/master/pics/breadboard.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;The MPR121 Breakout board all soldered up.&lt;/p&gt;

&lt;p&gt;&lt;img alt="The breakout board for capacitive touch" src="https://raw.githubusercontent.com/dropofwill/multi_tone_arduino/master/pics/breakout_board.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;A look at Peter’s new found sewing skills.&lt;/p&gt;

&lt;p&gt;&lt;img alt="A touch pad" src="https://raw.githubusercontent.com/dropofwill/multi_tone_arduino/master/pics/touchpad.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="In action" src="https://raw.githubusercontent.com/dropofwill/multi_tone_arduino/master/pics/touchpads.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/124891338"&gt;And his musical prowess&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="process"&gt;Process&lt;/h2&gt;

&lt;p&gt;Our original idea for the project was to create a mini drum kit, with a speaker inside of each pipecleaner capacitive pad. In the end putting the pads on top of the speakers muffled them too much so we moved them out on their own. Also, making a sound wave that resembles a drum kit turns out to be way harder than we thought. I tried down sampling drum beats and extracting pitch contours, but even when using two speakers the best beats sounded just like radio noise.&lt;/p&gt;

&lt;p&gt;Since that wasn’t getting anywhere we decided to pivot to something else that used multiple sounds at once. Supposedly the Arduino Uno has 3 timers, but whenever we tried to use the third one it would crash, so we were limited to two tones at a time. This left us with the dyads, the most obvious of which were power chords. We tried a few different progressions, but the one you see in the video is A5-D5-E5. The way it works is if you press just one pad it plays the root note of the chord, but when you tap a second pad it plays the fifth as well (to form the power chord).&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>rtasklib update: Ruby and external tools</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/rtasklib-update-ruby-and-external-tools/"/>
    <id>http://dropofwill.herokuapp.com/2015/rtasklib-update-ruby-and-external-tools/</id>
    <published>2015-04-05T22:22:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;It turns out that one of the reasons Ruby was popular before the advent of Rails was because it was so easy to integrate with 3rd party tools through subprocesses. In fact Ruby has at least 7 ways of executing processes either in the core or the standard libraries and many more user implemented varieties. Since &lt;code&gt;rtasklib&lt;/code&gt; is at its core concerned with interacting with a subprocess having a solid understanding of the available options is important. Below I summarize the results of my research for several of Ruby’s subprocess methods.&lt;/p&gt;

&lt;h2 id="kernelexec-exececho-exec"&gt;Kernel#exec, &lt;code&gt;exec('echo exec')&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Exec works by actually changing the current process into whatever its parameter is. So anything that comes after an &lt;code&gt;exec&lt;/code&gt; call in a Ruby program will never execute. This is useful for tasks where that call is the last action the program takes as well as acting as the basic building block off of which all the other commands are implemented.&lt;/p&gt;

&lt;h2 id="kernel--echo-backticks--exit-code"&gt;Kernel#`, &lt;code&gt;`echo backticks` =&amp;gt; exit code&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The one I often used before researching this was the ‘backtick’ methd, where every statement between backticks is passed to a subprocess (using &lt;code&gt;Kernel#fork&lt;/code&gt; and &lt;code&gt;Kernel#exec&lt;/code&gt; under the hood) and returns the exit code. This looks like a special statement in Ruby, but really its just a little syntactic sugar around a kernel method. Obviously, for &lt;code&gt;rtasklib&lt;/code&gt; I’m interested in the actual output of the process, not just whether it was successful, so another technique is needed.&lt;/p&gt;

&lt;h2 id="kernelsystem-systemecho-system--stdout"&gt;Kernel#system, &lt;code&gt;system('echo system') =&amp;gt; STDOUT&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;A slightly different kernel method is &lt;code&gt;system&lt;/code&gt;, which works the same under the hood as the backticks method, but instead of returning the exit code it returns STDOUT. This is more useful, but both are necessary for my purposes.&lt;/p&gt;

&lt;h2 id="open3popen3"&gt;Open3#popen3&lt;/h2&gt;

&lt;p&gt;Open3 is a module included in the standard libraries that offers a little bit more control over the process along with a Ruby-style block DSL. It has a number of methods available for various levels of control and piping processes together. The closest to what I want is &lt;code&gt;Open3#popen3&lt;/code&gt;, which offers the most control. A simple used case would look like the following:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~~~
Open3.popen3('echo popen3') do |stdin, stdout, stderr, wait_thread|
  pid = wait_thread.pid
  # Process::Status object returned.
  exit_status = wait_thread.value
end
~~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is closer to what I want, but managing interactive sessions (which does happen occasionally with &lt;code&gt;task&lt;/code&gt;) starts to get messy, is their a better way?&lt;/p&gt;

&lt;h2 id="pty-and-rubyexpect"&gt;PTY and ruby_expect&lt;/h2&gt;

&lt;p&gt;Enter the standard library PTY and the external gem &lt;code&gt;ruby_expect&lt;/code&gt; both of these work similarly to Open3, but allow you to work with interactive sessions cleanly by implementing an interface similar to the UNIX tool Expect. The syntax of the two are slightly different, but the basic idea is that you create a subprocess and provide a way to respond to a given regex. An example of &lt;code&gt;ruby_expects&lt;/code&gt; syntax is shown below.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~~~
exp = RubyExpect::Expect.spawn(some_cmd)
exp.procedure do
  any do
    expect /\(yes/no\)/ do
      if respond
        send "yes"
      else
        send "no"
      end
    end
  end
end
~~~
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Right now I’m using the &lt;code&gt;ruby_expect&lt;/code&gt; gem, but I’ve also implemented the PTY version as well and have been switching back and forth between the two. They both do what I want, but lack good documentation. The benefit of using the pure Ruby gem is that it is much easier to read than the C implementation, though I haven’t checked out the Rubinius version (the Ruby interpreter written in Ruby), which might have a Ruby version of PTY.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Review of: the Quantifying the Value of Open Source Hardware Development</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/lit-review-of-the-quantifying-the-value-of-open-source-hardware-development/"/>
    <id>http://dropofwill.herokuapp.com/2015/lit-review-of-the-quantifying-the-value-of-open-source-hardware-development/</id>
    <published>2015-03-30T23:45:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;He presents three different equations to evaluate the value of an open source hardware project and several ways to extrapolate into long term predictions. He then shows how to use these as a case study on open hardware, a syringe pump. In the end he predicted the value of the pump to be between 240k to 800,000k.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt; &lt;a href="http://www.mtu.edu/ece/department/faculty/full-time/pearce/"&gt;Joshua M. Pearce, Phd&lt;/a&gt;, professor of material and computer engineering at Michigan Tech University.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;What:&lt;/strong&gt; An academic paper making the economic case for investing in Free and Open Source Hardware (FOSH). Pearce, J.M. (2015) Quantifying the Value of Open Source Hardware Development. Modern Economy, 6, 1-11. &lt;a href="http://dx.doi.org/10.4236/me.2015.61001"&gt;http://dx.doi.org/10.4236/me.2015.61001&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Where:&lt;/strong&gt; &lt;a href="http://bizlegfoss-ritigm.rhcloud.com/static/books/ME_2015011215185288-Value-OSHW.pdf"&gt;Available on the RIT BizLeg website&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; December 2014&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="the-good"&gt;The Good&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;More technical, economic exploration of the implication of FOSH (and FOSS) work is important, so that we have more material to argue with.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The analysis in the advantages and disadvantages section is a great summary of the paper.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I like that the conclusion makes such a strong statement about the value of Open Source. Though I’m not qualified to comment on the quality of the methodology.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="the-bad"&gt;The Bad&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;As he mentions on page 2, the data for turning a download into a product and just the idea of tracking downloads in itself is really and impossible task, with the ubiquity of P2P distribution (especially in technical communities) and the amount of downloads that just don’t result in anything being actually made. This isn’t a bad thing, in fact it’s one of the things that makes this so exciting. However, it does limit the usefulness of his equations, since at their foundation they rely on this data (littered throughout at &lt;em&gt;P&lt;/em&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I also have a bit of a problem with macroeconomics that focuses on trying to deterministically measure things like ‘value to society’. That’s not to say we can’t model these processes to some degree of accuracy, but at the very least these require actual data to train a stochastic process on. Anything else is too brittle to be of much use.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I think some graphs would help demonstrate the conclusion, especially with the extrapolated dataset.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This is published in the &lt;em&gt;Modern Economy&lt;/em&gt; is an economics journal, but it’s unclear to me how respected it is in the economics community. &lt;a href="http://www.scirp.org/journal/Journalcitationdetails.aspx?JournalID=163"&gt;Its Google Impact Factor is 0.57&lt;/a&gt; and &lt;a href="http://www.scirp.org/journal/AimScope.aspx?JournalID=163"&gt;is aimed at short reports on preliminary data, but not yet complete research.&lt;/a&gt; So, I would like to know how complete does Pearce think this research and what do people from the economics field think about it?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With value ranges from 200k to 800,000k how useful are these calculations in practice?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are these deterministic equations commonly used for prediction in macroeconomics?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="final-thoughts"&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;A technical (and it is very technical) look at the economics of FOSH, it breaks new, necessary ground in the field.&lt;/p&gt;

&lt;p&gt;Rating 0.7&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mouse Rat: Technical explanation</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/mouse-rat-technical-explanation/"/>
    <id>http://dropofwill.herokuapp.com/2015/mouse-rat-technical-explanation/</id>
    <published>2015-03-28T14:37:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;Technical explanation for a wearable gesture based mouse glove. It used the Arduino Flora, the wearable LSM9DSO accelerometer, and MPR121 capacitive touch breakout, all from Adafruit.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Source code available on Github: &lt;a href="http://github.com/dropofwill/mouse_rat"&gt;dropofwill/mouse_rat&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Team&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://github.com/JosephCoppola"&gt;Joe Coppola&lt;/a&gt;: Production Manager&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://github.com/Petroochio"&gt;Peter Gyory&lt;/a&gt;: Electrical Engineer&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://github.com/dropofwill"&gt;Will Paul&lt;/a&gt;: Lead Programmer&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id="supplies"&gt;Supplies&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Adafruit Flora (Gemma should also work)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Adafruit Wearable LSM9DSO&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Adafruit Breakout MPR121 (no wearable version available)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Conductive/regular thread and needle&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Conductive fabric (just a little bit for the fingers)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flexible wire&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Soldering tools &amp;amp; supplies&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="schematic"&gt;“Schematic”&lt;/h2&gt;

&lt;p&gt;Here is a rough schematic of how to wire up all the sensors. The key point to note here is that we actually are just using SDA/SCL and chaining the capacitive and touch sensor together. This works fine because that’s how the Flora wearables were designed, with one caveat you have to make sure the two sensors have different ids internally.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Rough Schematic" src="https://raw.githubusercontent.com/dropofwill/mouse_rat/master/mouse_rat-schematic.jpg" /&gt;&lt;/p&gt;

&lt;h2 id="what-it-looks-like"&gt;What it looks like&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Top Down" src="https://raw.githubusercontent.com/dropofwill/mouse_rat/master/mouse_rat-top-down.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Bottom Down" src="https://raw.githubusercontent.com/dropofwill/mouse_rat/master/mouse_rat-bottom-down.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Close Up" src="https://raw.githubusercontent.com/dropofwill/mouse_rat/master/mouse_rat-close-up.jpg" /&gt;&lt;/p&gt;

&lt;h2 id="code"&gt;Code&lt;/h2&gt;

&lt;p&gt;My main role on the project was programming (and the occasional soldering venture when Peter got lightheaded from being bad at soldering), so I’ll talk a little bit about the code. Interacting with the mouse on the screen was pretty simple because Arduino provides a library for moving, clicking, and scrolling the mouse.&lt;/p&gt;

&lt;p&gt;The capacitive touch was simple to setup, except for the aforementioned I2C id issue. As the project came to a close we ended up tweaking some internal values in the library to make the touch a little less sensitive. We actually experienced a lot of crashes before we soldered the connections, even though are connections were tightly wound. Afterwards that problem completely went away (yay!).&lt;/p&gt;

&lt;p&gt;Most of my time then was spent converting accelerometer data into mouse movements. The first problem to consider is that people hold their hand in different positions and elevations, which change the values we get. To handle this we added a calibration loop on startup to get a range of min/max values that should be treated as stationary. We then took the mean value of this range and subtracted it from any accelerometer inputs to make sure input wasn’t weighted in a particular direction. We also clamped inputs to between 20 and -20 m/s^2 to keep violent motions from going too crazy. We polled the accelerometer about 120 times a second for these values and mapped them to between -30 and 30 pixels relative to the current position of the mouse.&lt;/p&gt;

&lt;h2 id="wrap-up"&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;In the end the glove mouse wasn’t as effective as we had hoped. Accelerometer input is even more fuzzy then optical and it became clear to us why you don’t see that many acceleration based mice on the market. The glove we used had conductive finger tips, which contrary to what we thought, actually hinders the capacitive touch sensors (it raises the baseline current so that it takes a lot of pressure to register a touch), so we had to move the clicking mechanism to below the finger tips. The glove itself is sort of fragile (lots of components sewed on to stretch material) and an aspect of using a glove that we didn’t consider was that it gets fairly warm inside after a bit of use.&lt;/p&gt;

&lt;p&gt;If we did it again some changes we would make from the construction side of things would be to use a lighter weight glove (maybe even just mesh) as we only really need three fingers and a place to put the sensor components we could probably even cut the idea of using a glove down to just caps on the finger tips connected with flexible wire to deal with the heat and discomfort.&lt;/p&gt;

&lt;p&gt;From a programming stand point this could definitely benefit from a more advanced calibration process, right now our sensor has 9 degrees of freedom and we are really only calibrating using 3. Movement is still kind of awkward (reminiscent of the Lenovo ThinkPads joystick in the middle of the keyboard), we could probably improve this through using a more advanced acceleration to pixels conversion system.&lt;/p&gt;

&lt;p&gt;All that aside we ended up with a somewhat usable mouse that is actually a lot of fun to mess around with. So not ready for production at all, but a fun project and we all learned a lot.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mouse Rat: Rethinking the mouse computer interface</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/mouse-rat-rethinking-the-mouse-computer-interface/"/>
    <id>http://dropofwill.herokuapp.com/2015/mouse-rat-rethinking-the-mouse-computer-interface/</id>
    <published>2015-03-28T14:36:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;Design exploration for a wearable gesture based mouse glove.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Team&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://github.com/JosephCoppola"&gt;Joe Coppola&lt;/a&gt;: Production Manager&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://github.com/Petroochio"&gt;Peter Gyory&lt;/a&gt;: Electrical Engineer&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://github.com/dropofwill"&gt;Will Paul&lt;/a&gt;: Lead Programmer&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The two major ways people interact with a computer are the keyboard and mouse. The former is a precise input, used for tasks where the user knows exactly what they want to do or at least knows how to search for it if they don’t. The mouse on the other hand is an inherently fuzzy and visual input, what it lacks in precision and automation it makes up for in how easy it is to pick up and explore.&lt;/p&gt;

&lt;p&gt;A problem with both these inputs is that they are stationary (require to be setting on something) and can lead to repitive stress injuries (something that my teammate Joe has). Our idea was to recreate the fuzzy human-computer interaction with a device thatwasn’t a peripheral, but wearable. By using an accelerometer instead of an optical input we free the user from a desk and by using a glove we allow the user to interact in the most non-invasive way possible: however they want (at least in theory).&lt;/p&gt;

&lt;p&gt;Since this is a wearable and multipurpose devices the taxonimies of experience don’t really fit well. Total success in this respect would be if the user didn’t experience anything, it should be transparent to the interaction that the user is currently experiencing. In that respect I guess &lt;em&gt;focus&lt;/em&gt; and &lt;em&gt;control&lt;/em&gt; are closest to what we want to create.&lt;/p&gt;

&lt;p&gt;Out of that comes the aspects of meaning we are trying to create: freedom and oneness. Freedom in the sense that it could be used on a couch just as easily as a desk. Oneness in the sense that we want to create a more organic way to communicate with a computer. This is one part of a system that points us towards the goal of HCI one day mirroring the way we communicate with each other (gestures, speech, and facial expressions).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Review of: Market power and regulation</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/review-of-market-power-and-regulation/"/>
    <id>http://dropofwill.herokuapp.com/2015/review-of-market-power-and-regulation/</id>
    <published>2015-03-17T23:42:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;Regulation of public services produced by monopolies or oligopolies in a way that balances production, innovation, and performance is a really, really hard problem. Jean Tirole has spent most of his academic career studying the ways these power relationships interact generally and then exploring specific industries to give actual advice.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt; About &lt;a href="http://en.wikipedia.org/wiki/Jean_Tirole"&gt;Jean Tirole&lt;/a&gt;, French professor of economics who focuses on industrial organization and game theory.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;What:&lt;/strong&gt; A pop-sci introduction to the research that won the 2014 Nobel Prize in Economics&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Where:&lt;/strong&gt; &lt;a href="http://bizlegfoss-ritigm.rhcloud.com/static/books/nobel-popular-economicsciences2014.pdf"&gt;Available on the RIT BizLeg website&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; 2014&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="the-good"&gt;The Good&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The owner, foreman, worker example does a good job of clarifying the problem, which is quite abstract from a real world point of view.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This bit about game theory seems to follow the trend we have been seeing in the legal documentation: “it depends.” Different markets behave differently and need to be analyzed individually.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Software is one of the key markets that it uses as an example of monopolies taking over a supply chain by holding the keys to just one piece. This (to my FOSS tuned brain) points to the importance of having complete control of every level of your infrastructure. That means open all the way down to the OS and hardware level.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="the-bad"&gt;The Bad&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This needs some useful visualizations. I know, who doesn’t love a half page Monopoly man? But this is an example where all the illustrations have a very low ink to data ratio and this is document on a topic where that is not acceptable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I realize this was a pop-sci piece, but a little more detail into the actual work and some non-hypothetical examples would have been nice.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;So all this was being implemented sometime soon after I was born in 1993. Where exactly has this been successful? It sounds good, but the major problem with a micro-economic or game-theory outlook on problems that I’ve noticed is that they make too many simplifying assumptions to necessarily play out like it does in theories or models.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A lot of this sounds like Tirole and his colleagues are hand exploring data from a number of industries and discussing results. Is this an efficient way to analyze fast moving, global, and diverse markets? Is it possible to develop a model that can automatically produce ‘good enough’ results?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Why should we mix private contractors with public goods in the first place? It seems like that would simplify this interaction substantially.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="final-thoughts"&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;Nice introduction to the work of an influential economist I had never heard of before, good use some real life examples, meaningful visualizations, and a little more game theory depth. But it’s just a 6-page pop-sci article, so that’s probably too much to expect.&lt;/p&gt;

&lt;p&gt;Rating: 0.7&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>rtasklib update march 16th</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/rtasklib-update-march-16th/"/>
    <id>http://dropofwill.herokuapp.com/2015/rtasklib-update-march-16th/</id>
    <published>2015-03-16T00:02:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;Over the last couple of weeks the overall architecture has been in a state of flux as I have been swapping pieces in out to see what will work best. Now as I approach my original milestone for having this in a working condition things are starting to fall into place. Models for tasks and configuration are pretty much stable, initialization of the configuration is done, and validation and serialization of tasks are coming along. The main bit of work left to do is writing the controllers to hook all of the components together and will effectively make up the public interface for the library.&lt;/p&gt;

&lt;h2 id="a-little-implementation-detail"&gt;A little implementation detail&lt;/h2&gt;

&lt;p&gt;For the configuration file I decided to effectively store it as a shallow hash structure before converting it to a Virtus domain object. The config will be immutable because there should not be a need to both permanently and dynamically change the users configurations, the latter alone can be configured on a per call basis with the &lt;code&gt;rc:&lt;/code&gt; flag. Because of this we only have to go in one direction, which makes the serialization layer less restrictive. As I mentioned last week &lt;code&gt;taskw&lt;/code&gt; implemented a deep nested hash like this:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rc["color"]["label"]["sort"] = 'gray10'
# which makes this (a default config) impossible to store as well
rc["color"] = 'on'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I went with the simplest solution I could come up with, which was to treat each of the paths as unique keys in a shallow hash (while converting periods to underscores to follow a Ruby convention), something like this (using Ruby symbols, instead of strings for the keys):&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rc[:color_label_sort] = 'gray10'
rc[:color] = 'on'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From there its just a matter of converting the hash to a Virtus object. Usually a Virtus attribute has a set type so that it knows what to coerce to, but in this case there are over 200 configurations in the default config and of course a config can contain arbitrary stuff from the user or another plugin, so there is no way to set this all up before hand. Luckily Virtus comes metaprogramming ready and it was easy enough to add attributes on the fly, I simply checked for booleans (including TW’s idea of “yes”/”no” and “on”/”off”), floats, integers, and the finally just said everything else was a string and to just keep it like it is.&lt;/p&gt;

&lt;h2 id="moving-forward"&gt;Moving forward&lt;/h2&gt;

&lt;p&gt;I plan to have a basic controller implementation in place by the end of next week or sometime during Spring Break. Once that’s in place I’ll be able to start splitting time between &lt;code&gt;task_time&lt;/code&gt; and &lt;code&gt;rtasklib&lt;/code&gt; again.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>task_time and rtasklib updates March 8th</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/task_time-and-rtasklib-updates-march-8th/"/>
    <id>http://dropofwill.herokuapp.com/2015/task_time-and-rtasklib-updates-march-8th/</id>
    <published>2015-03-08T21:10:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;Last week I talked about how all existing &lt;code&gt;TaskWarrior&lt;/code&gt; wrappers were not going to satisfy the requirements for &lt;code&gt;task_time&lt;/code&gt;, so I decided to roll my own Ruby wrapper &lt;code&gt;rtasklib&lt;/code&gt; and started working on the JSON to domain object marshalling and vice versa. I realized that I was reinventing the wheel a bit with the domain objects and to some extent with the data type coercions (though obviously some custom coercions will be necessary).&lt;/p&gt;

&lt;p&gt;I want to implement a familiar interface for developers to interact with the TW database, like the guys behind the Python &lt;code&gt;taskllb&lt;/code&gt; tried to do with Django’s QuerySet. So I looked into writing it as a simple adapter for one of the major Ruby ORMs, &lt;a href="https://rubygems.org/gems/activerecord"&gt;ActiveRecord&lt;/a&gt;, &lt;a href="http://datamapper.org"&gt;DataMapper&lt;/a&gt;, and &lt;a href="http://rom-rb.org"&gt;ROM (Ruby Object Mapper)&lt;/a&gt;. The ActiveRecord implementation is not particularly friendly to non-SQL data stores and has been quite a bit of work for people using NoSQL to write adapters for. Datamapper had several plain text adapters written (YAML, CSV, etc.), but the whole project had been pretty much been abandoned for ROM. I spent the most time messing around with ROM, it really is a new paradigm for an ORM (the developers might argue it isn’t actually an ORM), but it has not yet hit its 1.0 release and the API keeps changing. So even though they had several plaintext data store adapters implemented, they no longer worked with the current release. And while I think I could probably get it working with a little work, I realized I was spending too much time on it for the value it would bring to this particular project.&lt;/p&gt;

&lt;p&gt;However, the time spent with ROM was not a complete loss, because the people working on it have also released part of its core as a separate gem, &lt;a href="https://github.com/solnic/virtus"&gt;Virtus&lt;/a&gt;, specifically for working with domain objects and providing a framework for coercing data types (as well as handling finalization and circular dependencies).&lt;/p&gt;

&lt;p&gt;For the validation layer I’m test driving the &lt;a href="https://github.com/kodio/veto"&gt;Veto&lt;/a&gt; gem, I was considering using ActiveModel and just including the validations submodule, but if Veto can do the trick that would remove a fairly heavy dependency.&lt;/p&gt;

&lt;p&gt;For reading in the config I was thinking about just using just a simple Hash data structure, which is what the Python wrapper &lt;code&gt;taskw&lt;/code&gt; did. One downfall of this approach is that TW doesn’t configs don’t actually work like that internally, so we end up with situations like this:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;color = on
color.label.sort = gray10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which cannot be stored as a hash, &lt;code&gt;taskw&lt;/code&gt; admits this and prefers child configs to parent ones. That’s why I’m going to treat the &lt;code&gt;.taskrc&lt;/code&gt; file as its own read-only domain object, perhaps generated by the &lt;code&gt;task show&lt;/code&gt; command or by reading the &lt;code&gt;~/.taskrc&lt;/code&gt; with something like &lt;a href="https://github.com/datafolklabs/ruby-parseconfig"&gt;&lt;code&gt;parseconfig&lt;/code&gt;&lt;/a&gt;, though since TW uses dot syntax it might be just as simple to implement it myself (something like &lt;a href="https://gist.github.com/potatosalad/760726"&gt;this quick and dirty gist&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id="big-picture"&gt;Big Picture&lt;/h2&gt;

&lt;p&gt;Here’s a broad sweeping overview of my currently planned architecture. The following shows the modules, classes, as well as inheritance and composition and some of the class methods. Of course all this is subject to change, but this is where I am at right now.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Public interface, only part of the application a user should interact with
Rtasklib::TW
# Loads .taskrc in on intialization, finds the data store and custom UDAs
::new(rc="~/.taskrc", config_override={})

# Glue that holds everything together
Rtasklib::Controller

# Domain objects &amp;lt;=&amp;gt; JSON for import/export
Rtasklib::Models
include Virtus.model
::Task
::Taskrc

# Connected with each relevant attribute in the model
Rtasklib::Validations
include Veto.validator
::UUID
::String
::StringArray
::Numeric
::Date
::Duration

# Runs the actual shell commands (using Open3)
Rtasklib::Exectute
include Open3
::write(filter, data)
::read(filter)
::execute(args*)

Rtasklib::ParseConfig
# or possibly
Rtasklib::ParseConfig &amp;lt; ParseConfig
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="moving-forward"&gt;Moving Forward&lt;/h2&gt;

&lt;p&gt;I hope to have the models ‘done’ by next week and hopefully enough of the architecture around it done so that I can begin building &lt;code&gt;task_time&lt;/code&gt; against it as quickly as possible, so I can figure out the design flaws earlier rather than later.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Open Source Business Models and Implications</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/open-source-business-models-and-implications/"/>
    <id>http://dropofwill.herokuapp.com/2015/open-source-business-models-and-implications/</id>
    <published>2015-03-04T23:02:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;The GPL doesn’t actually care what enterprise companies do with the code internally, even if they make changes, distribution only counts if it happens outside of their immediate company. There are four major business models built around open source software: Support Sellers (e.g. give away the recipe, open a restaurant), Loss Leader (e.g. give it away to speed up or help out your prop project), Widget Frosting (e.g. sell the hardware, give away the software), and Accesorizing (e.g. sell books, t-shirts, penguin dolls, etc.).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt; The Open Source Initiative and the Free Software Foundation&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;What:&lt;/strong&gt; Chapter 12, Section 1 of the book &lt;em&gt;Copyleft and the GNU General Public License: A Comprehensive Tutorial and Guide&lt;/em&gt; and an article on the OSI’s website titled &lt;em&gt;Open Source Case for Business&lt;/em&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Where:&lt;/strong&gt; &lt;a href="http://bizlegfoss-ritigm.rhcloud.com/static/books/comprehensive-gpl-guide.pdf#section.12.1"&gt;available for free on RIT’s Business and Legal issues in FOSS course website&lt;/a&gt; and on &lt;a href="http://opensource.org/advocacy/case_for_business.php"&gt;the OSI’s website&lt;/a&gt; respectively.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; The OSI article was last update in 2014, but is probably much older (Netscape anyone?). First version of the FSF book was released in 2003, but has had consistent updates from then until the latest change in 2014.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="good"&gt;Good&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Glad to see the FSF encouraging the distribution of software in a corporate environment (even with modifications!).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Feeding yourself with open source contributions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="bad"&gt;Bad&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Netscape shouldn’t be used as an example of what to do anymore, it didn’t work out in the end.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A bunch of these links are 404’ing, which leads to kind of a bigger question in web archival: since link rot is such a real and pervasive problem is linking an uncontrolled, brittle source a good form of attribution?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The whole OSI article is just a load of [citation needed]s, I love Open Source as much as anyone, but some of these items are just ridiculous.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Does the Chapter 12 section 1 imply that one does not need to supply the source to the users if it is in a corporate environment? If so why is that considered a different form of distribution than say a download link on a website?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;See question above in Bad item 2.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Review of Common FOSS Organizational Issues</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/review-of-common-foss-organizational-issues/"/>
    <id>http://dropofwill.herokuapp.com/2015/review-of-common-foss-organizational-issues/</id>
    <published>2015-03-02T21:40:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;This chapter gives an overview of ways that a FOSS organization can limit their individual liability, primarily through various means of incorporation. It serves as a guide to the various options available and clairifies some general (but not case specific) requirements to maintain a nonprofit status.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt;,&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Richard_Fontana"&gt;Richard Fontana&lt;/a&gt; (lawyer, worked on GPLv3, LGPLv3, AGPL, director of OSI),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Bradley_M._Kuhn"&gt;Bradley M. Kuhn&lt;/a&gt; (free software activist, president of Software Freedom Conservancy, previously worked for the SFLC and FSF),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Eben_Moglen"&gt;Eben Moglen&lt;/a&gt; (law and legal history professor at Columbia University and director-counsel and chairman of the SFLC),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://www.linkedin.com/pub/matt-norwood/5/770/a39"&gt;Matthew Norwood&lt;/a&gt; (IP lawyer, previously was counsel at the SFLC),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://www.ravicher.com/"&gt;Daniel B. Ravicher&lt;/a&gt; (lawyer and law professor),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Karen_Sandler"&gt;Karen Sandler&lt;/a&gt; (executive director of the SFC, former director of the GNOME Foundation, former general counsel at the SFLC),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://twitter.com/jamesvasile"&gt;James Vasile&lt;/a&gt; (director of Open Internet Tools Project),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://torekeland.com/about/aaron-williamson"&gt;Aaron Williamson&lt;/a&gt; (IP lawyer for Tor Ekeland).&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;What:&lt;/strong&gt; Chapter 5 of the book &lt;em&gt;A Legal Issues Primer for Open Source and Free Software Projects&lt;/em&gt; put out by the &lt;a href="https://www.softwarefreedom.org/"&gt;Software Freedom Law Center (SFLC).&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Where:&lt;/strong&gt; &lt;a href="http://bizlegfoss-ritigm.rhcloud.com/static/books/foss-primer.pdf"&gt;available for free on RIT’s Business and Legal issues in FOSS course website&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; Latest edition (1.5.2) published June 2008&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="the-good"&gt;The Good&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The Software Freedom Conservancy is an awesome organization, I love that they don’t charge their member projects anything to join and don’t restrict projects to any one FOSS license or require reassigning copyright.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The IRS has regularly organizations created for the promotion of free and open source software projects as having charitable purposes.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Which means that not only do 501c3 FOSS projects get tax exemption at the federal and state level, but people can make deductions off of their own taxes for any donations made to one of these organizations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some Formation Documents mentioned in the text:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;A &lt;strong&gt;certificate of incorporation&lt;/strong&gt;, a standard document describing how the incorportation will be formed, most FOSS organizations will organize as a non-stock nonprofit corporation, meaning no one will ‘own’ the organization.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;A set of &lt;strong&gt;by-laws&lt;/strong&gt;, which describe facts about the organization like membership, board of directors, officers, and what all their roles will entail.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;An &lt;strong&gt;Employer Identification Number&lt;/strong&gt;, or EIN, from the IRS, which is required in order to have employees and open a bank account, sort of like a SSN for corporate entities.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="the-bad"&gt;The Bad&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;New York treats out of state corporations as if they were incorporated in a foreign country! And along with it comes all the added requirements, fees, and administrative hoops to jump through.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apparently IRC may not qualify as a board meeting in a lot of states (legally ambiguous at least). Once again the law is struggling to keep pace with technology.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All of the work and cost required for an organization or developer to limit their liability puts larger corporations in a much safer position just because they can afford these things as part of their operational costs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;What protections does incorporation give compared to say the final liability clause in the BSD or MIT licenses?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With all this incorporation information being so US, and even further, state specific, how does one deal with the inherently global nature of open source projects? I’m thinking in particular of projects like Ruby and Rails which have major contributors on every continent minus Africa.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="final-thoughts"&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Covers the material as thoroughly as can be expected for a topic that varies so much from state to state. Personally I think that this chapter really drove home the importance of umbrella organizations to handle all the hassles of incorporation for these FOSS projects. Personally I don’t forsee any of my projects getting to that stage anytime soon, but its nice to have an overview anyways.&lt;/p&gt;

&lt;p&gt;7/10&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>task_time update March 1st</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/task_time-update-march-1st/"/>
    <id>http://dropofwill.herokuapp.com/2015/task_time-update-march-1st/</id>
    <published>2015-03-01T21:16:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="/2015/02/22/a-comparison-of-task-warrior-wrappers.html.markdown"&gt;Last week&lt;/a&gt; I talked about picking an appropriate TaskWarrior wrapper for my &lt;code&gt;task_time&lt;/code&gt; project. A rundown of the options are &lt;code&gt;taskw&lt;/code&gt; (Python, GPL, low on documentation, durations not implemented yet), &lt;code&gt;tasklib&lt;/code&gt; (Python, BSD, good documentation, durations not implemented, does not read in users &lt;code&gt;.taskrc&lt;/code&gt;), and &lt;code&gt;taskwarrior&lt;/code&gt; (Ruby, MIT, just does JSON marshalling/unmarshalling). In the end I decided none of these were actually going to cut it, since none implemented duration features, so my choices were to either Fork and implement durations and whatever other features were needed or to roll my own. In the end I really would rather use Ruby for this so I decided that it would be good to write the wrapper from scratch, while taking cues from each of the other implementations. I named the repo &lt;code&gt;rtasklib&lt;/code&gt; in following with the ruby convention of naming wrappers with lib and either a leading &lt;code&gt;r&lt;/code&gt; or trailing &lt;code&gt;_ruby&lt;/code&gt; (dashes imply a subclass and are only used when your’re gem extends an existing gem not an external program). You can find the repo at &lt;a href="http://github.com/dropofwill/rtasklib"&gt;&lt;code&gt;dropofwill/rtasklib&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;task_time&lt;/code&gt; repo at &lt;a href="http://github.com/dropofwill/task_time"&gt;dropofwill/task_time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far I’ve been working on the data conversion process and setting up a sandboxed testing environment (I don’t want to run these tests on my local database of tasks after all :) ). Luckily with TaskWarrior you can just point it to a separate &lt;code&gt;.taskrc&lt;/code&gt; and it will create a database wherever its told, so I have it setting one up inside my spec’s data directory. I’ve setup &lt;a href="https://coveralls.io/r/dropofwill/rtasklib?branch=master"&gt;Coveralls&lt;/a&gt; (for test coverage monitoring) and &lt;a href="https://travis-ci.org/dropofwill/rtasklib"&gt;Travis-Ci&lt;/a&gt; (for continuous integration) on both projects (though &lt;code&gt;task_time&lt;/code&gt; isn’t being tested in a meaningful way at the moment). One problem I ran into was installing TaskWarrior on Travis Ubuntu machine, it turns out the Ubuntu repos are 4 minor versions behind, which is a lot of missing TaskWarrior functionality (including stuff that &lt;code&gt;task_time&lt;/code&gt; will require to work), so I had to figure out how to install it from source, which took a few tries to get working right (see the .travis.yml). I don’t know how Ubuntu users can stand that sort of turn around on repo updates, but that’s another gripe for another time.&lt;/p&gt;

&lt;p&gt;As far as data conversions go, the TaskWarrior data is subtlely more complicated than it seems. There are supposedly only 4 data types: string, numeric, date, and duration. In Ruby numerics should be represented as Fixnum (ints), Floats, or Bigdecimal/Bignum if need be. It also turns out that the string data type in the TaskWarrior world can also mean array of strings and these are used interchangeably internally. Dates and Durations can be represented with varying levels of precision, precise versions are represented in the standard ISO8601 format, no matter how the user inputs it (though they add their own idea of negative durations to the spec for things that are past due…). But there are also &lt;a href="http://taskwarrior.org/docs/named_dates.html"&gt;named dates&lt;/a&gt; like &lt;code&gt;mon&lt;/code&gt; or &lt;code&gt;eoww&lt;/code&gt; (end of work week), as well as the interesting &lt;code&gt;someday&lt;/code&gt; and &lt;code&gt;later&lt;/code&gt; that represent January 18th, 2038. Luckily the source code is available so I should be able to figure this out (as you can tell by the badge on the repo, I’m not there yet). From what I can tell the other repos just choke on the named dates, so there’s not a lot of help to be had there. My current approach is to extend (internally, Ruby lets you modify everything at runtime) the &lt;a href="http://www.rubydoc.info/gems/iso8601/0.8.5/ISO8601"&gt;ISO8601 ruby gem&lt;/a&gt; to support these weird formats as well.&lt;/p&gt;

&lt;h2 id="features-i-like-from-other-implementations"&gt;Features I like from other implementations&lt;/h2&gt;

&lt;h3 id="taskw"&gt;&lt;code&gt;taskw&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Reads in the users &lt;code&gt;.taskrc&lt;/code&gt; to make sure it handles data manipulation correctly. &lt;code&gt;Tasklib&lt;/code&gt; implements a config object, but does not create this from the user’s config.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="tasklib"&gt;&lt;code&gt;tasklib&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Makes the API follow Django’s &lt;code&gt;QuerySet&lt;/code&gt;, I’m going to try to do the same with Ruby’s &lt;code&gt;ActiveRecord&lt;/code&gt;. Following an existing API makes the onboarding process for new developers easier and makes sense for this project since TW is really just a plain text DB.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kind of a minor thing, but messing around with it I think it validates user input way too late in the process, if a process is going to fail it should do so as early as possible, not just the moment before it saves to the db.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All the code is thrown into a single file, which is kind of ridiculous.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="taskwarrior"&gt;&lt;code&gt;taskwarrior&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Uses &lt;code&gt;ActiveModel&lt;/code&gt; to handle validating user input, which makes the implementation super clean. No need to reinvent the wheel here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Has an examples section along with his Gantt chart plugin, which I think is crucial. Obviously, I’m going to have &lt;code&gt;task_time&lt;/code&gt; as one major example, but I think it’s important to design the wrapper against a few different use cases so that they don’t end up getting too tightly coupled.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="moving-forward"&gt;Moving Forward&lt;/h2&gt;

&lt;p&gt;My goal is to get &lt;code&gt;rtasklib&lt;/code&gt; to a point where I can start working on &lt;code&gt;task_time&lt;/code&gt; in 2 weeks, that doesn’t mean stable or feature complete or anything like that, just that it has implemented basic import/export functionality (so Open3 cmdline implementation, data-type conversions, and basic filtering). Once I get to that point I should be able to continue to develop them in parallel. In the meantime I’ve started to hash out the public interfaces for &lt;code&gt;task_time&lt;/code&gt;, for now I’ve put it on the README.md, but I’m probably going to move it to PLAN.md in the near future.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Comparison of Task Warrior Wrappers</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/a-comparison-of-task-warrior-wrappers/"/>
    <id>http://dropofwill.herokuapp.com/2015/a-comparison-of-task-warrior-wrappers/</id>
    <published>2015-02-22T15:54:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;So as it turns out there were 3 main libraries written to interact with the TaskWarrior database (I think there is also a Perl and maybe a PHP wrapper as well, but I couldn’t find them again and let’s face it: I’m not interested in using either of those languages anyways).&lt;/p&gt;

&lt;h2 id="python-taskwhttpsgithubcomralphbeantaskw-gpl-v3"&gt;Python: &lt;a href="https://github.com/ralphbean/taskw"&gt;taskw&lt;/a&gt;, GPL v3&lt;/h2&gt;

&lt;p&gt;A project developed by Rochester’s own Ralph Bean with help from 12 other devs, it is by far the most actively developed wrapper available and had a new commit just 3 days ago. It is developed by a dev who talks at rocpy every month and is the #rit-foss channel all the time, so that’s a big plus. The current build status has an error, but it looks like maybe some sort of &lt;a href="https://travis-ci.org/ralphbean/taskw"&gt;network connection problem?&lt;/a&gt; Will have to look into that further.&lt;/p&gt;

&lt;p&gt;Unfortunately, it is licensed under the v3 GPL license, which is going to make things annoying because the taskwarrior community primarily uses permissive licenses (the MIT in particular) and I prefer permissive licenses in general. However, using a copyleft non-LGPL licensed library with a compatible OSI license &lt;a href="http://en.wikipedia.org/wiki/GNU_General_Public_License#Compatibility_and_multi-licensing"&gt;is legally ambiguous&lt;/a&gt;, which puts me in an awkward situation. Probably going to talk to Remy about this in our next BizLeg class and report back here with some thoughts on the situation.&lt;/p&gt;

&lt;p&gt;On my first run through it did not appear to have filter passing ability, which is problematic for my planned API.&lt;/p&gt;

&lt;p&gt;File structure:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── CHANGELOG.rst
├── LICENSE.txt
├── MANIFEST.in
├── README.rst
├── requirements.txt
├── setup.cfg
├── setup.py
├── taskw
│   ├── __init__.py
│   ├── exceptions.py
│   ├── fields
│   │   ├── __init__.py
│   │   ├── annotationarray.py
│   │   ├── array.py
│   │   ├── base.py
│   │   ├── choice.py
│   │   ├── commaseparateduuid.py
│   │   ├── date.py
│   │   ├── duration.py
│   │   ├── numeric.py
│   │   ├── string.py
│   │   └── uuid.py
│   ├── task.py
│   ├── taskrc.py
│   ├── test
│   │   ├── __init__.py
│   │   ├── data
│   │   │   ├── default.taskrc
│   │   │   └── included.taskrc
│   │   ├── test_datas.py
│   │   ├── test_fields.py
│   │   ├── test_task.py
│   │   ├── test_taskrc.py
│   │   └── test_utils.py
│   ├── utils.py
│   └── warrior.py
├── test_requirements.txt
└── tox.ini

4 directories, 34 files
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="python-tasklibhttpsgithubcomrobgolding63tasklib-bsd-3-clause"&gt;Python: &lt;a href="https://github.com/robgolding63/tasklib"&gt;tasklib&lt;/a&gt;, BSD 3 Clause&lt;/h2&gt;

&lt;p&gt;A project developed by two authors: &lt;code&gt;robgolding63&lt;/code&gt; and &lt;code&gt;tbabej&lt;/code&gt;, it’s under fairly active development with the latest commit being two days ago. It tries to mirror the API of a Django ORM and seems to have complete read and write functionality, including a filtering class that &lt;code&gt;taskw&lt;/code&gt; appears to be missing.&lt;/p&gt;

&lt;p&gt;File Structure:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── AUTHORS
├── LICENSE
├── MANIFEST.in
├── README.rst
├── docs
│   ├── Makefile
│   ├── conf.py
│   └── index.rst
├── setup.py
└── tasklib
    ├── __init__.py
    ├── task.py
    └── tests.py

2 directories, 11 files
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="ruby-taskwarriorhttpsgithubcomdropofwilltaskwarrior-mit"&gt;Ruby: &lt;a href="https://github.com/dropofwill/taskwarrior"&gt;taskwarrior&lt;/a&gt;, MIT&lt;/h2&gt;

&lt;p&gt;And last, but not least the only Ruby library available. Unfortunately, it currently only supports read operations, which means it would require heavy modifications on my end to be usable for the &lt;code&gt;task_time&lt;/code&gt; project. It also hasn’t seen active development since 2013. That said it is written Ruby and MIT licensed, so it is basically what I’m looking for.&lt;/p&gt;

&lt;p&gt;On closer look though, this project works with the JSON export, so it doesn’t actually interact with the TaskWarrior database at all, which is almost entirely the point of using a wrapper at all. It’s looking more like if I want to do this in Ruby I’m going to be doing it on my own.&lt;/p&gt;

&lt;p&gt;File Structure:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── Gemfile
├── Guardfile
├── LICENSE
├── README.md
├── Rakefile
├── examples
│   └── finished-early
├── lib
│   ├── taskwarrior
│   │   ├── annotation.rb
│   │   ├── annotation_mapper.rb
│   │   ├── attributes.rb
│   │   ├── priority_mapper.rb
│   │   ├── project.rb
│   │   ├── repository.rb
│   │   ├── tag.rb
│   │   ├── task.rb
│   │   ├── task_mapper.rb
│   │   ├── validations.rb
│   │   └── version.rb
│   └── taskwarrior.rb
├── taskwarrior.gemspec
└── test
    ├── fixtures
    │   ├── no_deps.json
    │   ├── party.json
    │   ├── party2.json
    │   └── party_taxes.json
    ├── test_helper.rb
    └── unit
        ├── test_annotation.rb
        ├── test_priority_mapper.rb
        ├── test_project.rb
        ├── test_repository.rb
        ├── test_tag.rb
        ├── test_tag_habtm.rb
        └── test_task.rb

6 directories, 31 files
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="final-thoughts"&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;As much as I hate to admit it, I might have to pivot to using Python for this project, because the library wrapper is basically unusable. My options are to remake &lt;code&gt;tasklib&lt;/code&gt; or &lt;code&gt;taskw&lt;/code&gt; in Ruby (or at least get them to working condition). Licensing problems and the lack of a filter feature are problematic for &lt;code&gt;taskw&lt;/code&gt;, which means my current top option is &lt;code&gt;tasklib&lt;/code&gt;. My current plan of attack is to finalize my public API and goals for the project in parallel and finish research on dependencies by the end of next week.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Review of Trademarks and Your FOSS Project</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/review-of-trademarks-and-your-foss-project/"/>
    <id>http://dropofwill.herokuapp.com/2015/review-of-trademarks-and-your-foss-project/</id>
    <published>2015-02-21T15:26:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;Karen’s talk covers a lot of the same ground as the chapter in FOSS Legal Primer that I &lt;a href="2015-02-21-foss-legal-primer-common-trademark-issues.html.markdown"&gt;reviewed previously&lt;/a&gt;, but does so in a way that motivates, persuades, and explains with consistent use of examples, which I found much more persuasive and engaging.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt; &lt;em&gt;&lt;a href="http://en.wikipedia.org/wiki/Karen_Sandler"&gt;Karen Sandler&lt;/a&gt;&lt;/em&gt; (Executive Director of the &lt;a href="http://en.wikipedia.org/wiki/Software_Freedom_Conservancy"&gt;Software Freedom Conservancy&lt;/a&gt;, formerly Executive Director of the &lt;a href="http://en.wikipedia.org/wiki/GNOME_Foundation"&gt;GNOME Foundation&lt;/a&gt;, an attorney, and former general counsel at the &lt;a href="http://en.wikipedia.org/wiki/Software_Freedom_Law_Center"&gt;Software Freedom Law Center&lt;/a&gt;).&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;What:&lt;/strong&gt; A 45 minute talk given at the &lt;a href="http://allthingsopen.org"&gt;&lt;em&gt;All Things Open&lt;/em&gt; Conference 2014&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Where:&lt;/strong&gt; &lt;a href="http://youtu.be/JY6AtbtAuts"&gt;Available on YouTube&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; Given 10/22/2014 and Published on 11/14/2014.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="the-good"&gt;The Good&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;She gives the following key factors to consider in trademark cases:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;How similar are the marks?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Are they in the same market?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;What is a user’s impression?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Is there any actual confusion?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;What is the community impact?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Is it really just “nominative use” (parallel to “fair use” in copyright cases)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;She made a clear distinction between copyright and trademarks:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Trademark is a word or picture that preserve brand recognition and earned through use.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Whereas copyright you earn through creation and is intrinsic once you establish it a tangible medium.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It was really cool how a logo can both be freely licensed for modifications while still being trademarked and she gave a really good example of that with the GNOME logo where another company that did fish pedicures took the GNOME foot and turned it into a fish. Since they are in a completely different domain and there is no opportunity for actual confusion (as well as made changes) they are actually completely fine with this. Which is awesome example of open source design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It was good to hear her say that anti-disparagment clauses probably won’t stand up in court at lest in US jurisdictions, because of free speech laws.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;She gave several strong examples of cases where trademarks have actually protected consumers, whether that be driving people away from free software to proprietary versions by using the same mark or making malicious versions of free software and marketing it as if it was the same product.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Examples! Examples everywhere. This what I’m always looking for in legal matters like this.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="the-bad"&gt;The Bad&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Unrelated to trademark talk she almost went on a free software rant after a guy made the empirically true statement that copyleft is more difficult to integrate into a business than a permissive license. This should be obvious just by the name (it’s permissive after all), but is also true by definition just by the sublicensing clause in most permissive licenses. There are certainly a number hoops to jump through to maintain a copyleft license by design and the pervasiveness of the Linux kernel does nothing to change this fact.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also a number of large external companies to refuse to use copyleft code, whether this is because of misunderstanding or not, this is the case (Apple for instance only uses software with MIT or BSD like licenses).&lt;/p&gt;

&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Was anyone able to find the starter kit she referred to in the talk? I did a cursory search, but came up without much luck.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Both trademark reading we did were completely US-centric, how do trademarks work globally in comparison? I think this is especially important for free software, because the internet is a global community without country boundaries. If you decide trademarks are mission critical for your software it seems like you should be concerned with more than just the country you happen to be in at the time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="final-thoughts"&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;I thought this talk meshed really well with the previous reading, it actually answered several of the questions I came away with from the reading and gave me the examples that I needed to really be persuaded of the relevancy of trademarks and FOSS projects.&lt;/p&gt;

&lt;p&gt;Really liked it, highly recommend: 9/10.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>FOSS Legal Primer: Common Trademark Issues</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/foss-legal-primer-common-trademark-issues/"/>
    <id>http://dropofwill.herokuapp.com/2015/foss-legal-primer-common-trademark-issues/</id>
    <published>2015-02-21T14:21:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;Common Trademark Issues gives an overview of how trademark law in the US works and what that means to you as a FOSS developer. It explains the registration process, how you can lose your registration, and how to handle licensing agreements and enforcement.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt;,&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Richard_Fontana"&gt;Richard Fontana&lt;/a&gt; (lawyer, worked on GPLv3, LGPLv3, AGPL, director of OSI),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Bradley_M._Kuhn"&gt;Bradley M. Kuhn&lt;/a&gt; (free software activist, president of Software Freedom Conservancy, previously worked for the SFLC and FSF),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Eben_Moglen"&gt;Eben Moglen&lt;/a&gt; (law and legal history professor at Columbia University and director-counsel and chairman of the SFLC),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://www.linkedin.com/pub/matt-norwood/5/770/a39"&gt;Matthew Norwood&lt;/a&gt; (IP lawyer, previously was counsel at the SFLC),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://www.ravicher.com/"&gt;Daniel B. Ravicher&lt;/a&gt; (lawyer and law professor),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Karen_Sandler"&gt;Karen Sandler&lt;/a&gt; (executive director of the SFC, former director of the GNOME Foundation, former general counsel at the SFLC),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://twitter.com/jamesvasile"&gt;James Vasile&lt;/a&gt; (director of Open Internet Tools Project),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://torekeland.com/about/aaron-williamson"&gt;Aaron Williamson&lt;/a&gt; (IP lawyer for Tor Ekeland).&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;What:&lt;/strong&gt; Chapter 5 of the book &lt;em&gt;A Legal Issues Primer for Open Source and Free Software Projects&lt;/em&gt; put out by the &lt;a href="https://www.softwarefreedom.org/"&gt;Software Freedom Law Center (SFLC).&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Where:&lt;/strong&gt; &lt;a href="http://bizlegfoss-ritigm.rhcloud.com/static/books/foss-primer.pdf"&gt;available for free on RIT’s Business and Legal issues in FOSS course website&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; Latest edition (1.5.2) published June 2008&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="the-good"&gt;The Good&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Unlike patent law, trademark law is first come first serve. So even if you don’t register a mark you are allowed to continue using it if you made it first. This means you should do your research first to understand what is already out there, since it can’t be used against you in court.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I didn’t realize that the &lt;super&gt;TM&lt;/super&gt; doesn’t mean it’s registered and anyone can use that to assert their common law right.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Trademarks aren’t indefinite, you can lose a trademark through genericide and abandonment. The term genericide refers to when consumers start using your trademark to represent general class of products (Kleenex and Xerox perhaps?). And abandonment means that you stop actively using a mark (usually for a period of three years).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="the-bad"&gt;The Bad&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;It is stupid to try and prevent language from modifying your trademark into a verb, in English if enough people use your product it is going to happen, no matter what you want. Seriously this process is a linguistic process called &lt;em&gt;conversion&lt;/em&gt; and is the most common word-formation process in English. You have no hope in stopping it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perhaps you can design the original name in such a way that it is awkward to use as a verb, but even then people will be creative and come up with a way to use it anyways. Example: Twitter is an example of conversion of a verb to a noun so it is awkward to convert it back, so people just use tweet in its stead. Given enough usage this will happen, no matter what you want.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I think the issue of trademarks in FOSS development is a great example of how to get non-programmers involved in open source. Often programmers are not the best designers and understanding the subtlety involved in logo design takes a lot of effort that most of us don’t want to embark on (personally I’ve designed a bunch of logos out of necessity, and they work out fine because I have some design background, but it’s not what &lt;em&gt;I want to spend my time working on&lt;/em&gt;). I think making open source projects more inviting to designers (and writers, users, etc.) is an important step for any widely used project and one that is rarely ever considered seriously in my experience.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unregistered marks still stand up under common law, but only to their geographic scope of influence, which doesn’t translate well to the global world of the internet, leaving unregistered marks distributed primarily on the web in unknown territory. Which means in FOSS cases we have really have to pay the federal fee of $275 for registration, which is yet another example of the legal system not applying to the new global ecosystem of the web.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Non-commercial and non-confusing public use is unenforcable under trademark law. How then can FOSS licenses enforce their clauses about trademark abuse? If I fork a project can I continue to use their trademarked logo on the project if it remains open and non-commercial? I know it talks about forks and that seems to contradict what is said above about non-commercial uses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As a corollary to the above question, how is non-commercial defined here? Does this mean I need to register my project as a non-profit? Or is this by default if my project is not making a profit?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="final-thoughts"&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Trademarks seem to me the least evil of all IP rights, but also the least important to worry about as an open source project. These issues will really only effect you if your project reaches a certain size and to be honest on the internet we have better ways for consumers to find out what is legitimate: sha keys and links.&lt;/p&gt;

&lt;p&gt;Interesting read, learned a lot about TM, don’t really see the point of them for anything I’ll be working on in the future, but good to know about. As always in this text I wish there were more motivating examples, but I understand why they might consider that out of scope.&lt;/p&gt;

&lt;p&gt;6/10&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Taskwarrior timesheet plugin plan</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/taskwarrior-timesheet-plugin-plan/"/>
    <id>http://dropofwill.herokuapp.com/2015/taskwarrior-timesheet-plugin-plan/</id>
    <published>2015-02-16T14:36:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://github.com/dropofwill/task_time"&gt;Repo: dropofwill/task_time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a plan for a project that will act as a plugin for the application Taskwarrior that allows the users to use &lt;code&gt;task&lt;/code&gt; to keep track of their time involved with tasks. I chose task_time as the name because the original program is run with the &lt;code&gt;task&lt;/code&gt; command and in Ruby underscores are used to denote spaces (dashes imply some sort of class hierarchy).&lt;/p&gt;

&lt;h2 id="abstract"&gt;Abstract&lt;/h2&gt;

&lt;p&gt;Taskwarrior is a lightweight command-line applications that makes managing/filtering/reporting/understanding of your todos easier. One aspect that it is missing is time-tracking the developers say that this feature is out of scope and should be remedied with a plugin, the currently available plugins don’t mirror Taskwarrior’s attention to detail or polish and seem to be fairly minimal (no offense to those maintainers).&lt;/p&gt;

&lt;h2 id="detailed-description"&gt;Detailed Description&lt;/h2&gt;

&lt;p&gt;The interface for this project will be that of a simple command line tool, at some point I want to write or extend a current ncurses layout to use this as well, but that is out of scope for this phase of the project. I’m thinking that the entry point will be &lt;code&gt;task_time &amp;lt;filter&amp;gt;&lt;/code&gt; with an optional shell script for users that want a more seamless integration that will take &lt;code&gt;task &amp;lt;filter&amp;gt; time&lt;/code&gt; just like you would use it if it was built into Taskwarrior itself. All the task filtering will be passed on to &lt;code&gt;task&lt;/code&gt; behind the scenes, so I won’t have to reimplement that.&lt;/p&gt;

&lt;p&gt;The user will probably be something like &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; for keeping track of the raw data, &lt;code&gt;est&lt;/code&gt; for estimating how long a task is going to take, and then some other commands for generating the reports based on the previous time spent (filtering by project, task, tag, whatever). Another feature I would like to implement is a Kanban workflow. For all the reports I want to be able to export them to the command line to view and export to a number of formats (json, csv, xml, etc) like for all the other Taskwarrior reports, but also a PDF export from any Tilt-based template.&lt;/p&gt;

&lt;h2 id="excitement-or-why-do-you-care-about-a-todo-app"&gt;Excitement (or why do you care about a todo app)&lt;/h2&gt;

&lt;p&gt;Taskwarrior is an tool I use everyday, but as is I have to use another app (Freshbooks, Teamwork, etc.) to track my time spent on tasks for work and I end up not tracking my time for anything else. An important part of being a productive developer is understanding the end-to-end process: how long should this take? How long did it take? And why? Having actual data and reporting about this should make this process easier to understand.&lt;/p&gt;

&lt;p&gt;Plus all I write these days are web apps, yet most of what I use day-to-day is in the terminal, it will be nice to work on something where I’m the target audience for once. :)&lt;/p&gt;

&lt;h2 id="scope"&gt;Scope&lt;/h2&gt;

&lt;p&gt;Nothing is ever finished, but I think the scope of this project is such that I can make an initial release by the end of the class (see Milestones). As this is something I plan on using a lot, I imagine I will continue working on it after class is over.&lt;/p&gt;

&lt;h2 id="license"&gt;License&lt;/h2&gt;

&lt;p&gt;My license of choice is the Creative Commons 0, because I prefer to be as permissive as possible (and I don’t care about attribution). But since that is not OSI approved (and it needs to be for this class), my backup is the MIT, which is fairly permissive and the default license for Ruby projects and the license that Taskwarrior is released under, so it probably makes the most sense anyways.&lt;/p&gt;

&lt;h2 id="milestones"&gt;Milestones&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Initial functionality: internals work and public API finalized. Rough due date: March 16th, may shift back if I need to spend more time on implementing functionality in the wrapper.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reporting and external integration: all the charts and reporting features are working and any integration with external services are finalized. Rough due date: April 27th&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Initial Release: full to near full test coverage and packaged and submitted to at a minimum: RubyGems, AUR, and Debian (possibly also RPM as time permits). Rough due date: May 14th&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="programming-languages"&gt;Programming languages&lt;/h2&gt;

&lt;p&gt;This shouldn’t be a resource heavy project, all the heavy lifting will be done by taskwarrior itself (written in C++), for that reason I want to use Ruby, which is my interpreted language goto. If speed becomes an issue pivoting to Rust or C is always an option, but I do not foresee that as a problem.&lt;/p&gt;

&lt;p&gt;That said right now the Ruby library for interacting with Taskwarrior is a little out of date (missing a couple major Taskwarrior updates), so I’m going to have to either fork that project to add the functionality I need or pivot and write the project in Python, which has a more actively developed wrapper that seems to be up to date. I’ll have to make that decision pretty soon, I’m reviewing my options now.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Review of Patent Defense for FOSS Developers</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/review-of-patent-defense-for-foss-developers/"/>
    <id>http://dropofwill.herokuapp.com/2015/review-of-patent-defense-for-foss-developers/</id>
    <published>2015-02-14T23:47:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;This is a review of Chapter 4 of the &lt;em&gt;SFLC Legal Primer&lt;/em&gt;, &lt;em&gt;Patent Defense for FOSS Developers&lt;/em&gt;, inside it describes the anatomy of a patent, how to deal with claims brought against you, and why you, as a FOSS developer, should not bother with patenting your software, even as a protective measure.&lt;/p&gt;

&lt;p&gt;Anatomy of a Patent:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Title,&lt;/strong&gt; which has no legal bearing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 7-digit uniquie identifier and an application identifier.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Abstract,&lt;/strong&gt; a short summary that rarely has any impact on the proceedings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Drawings,&lt;/strong&gt; in software these are usually just architecture diagrams or flowcharts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Related patent applications,&lt;/strong&gt; ‘related’ here can mean a number of things from continuation of old patents to patents that were originally filed jointly that are now separate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Background of the invention,&lt;/strong&gt; gives the applcants view of prior art, though often left out for fear it might limit the scope of the patent more than the applicant wants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Summary of the invention,&lt;/strong&gt; a summary of the patent (that again should not be considered in a vacuum).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Detailed description,&lt;/strong&gt; the part of the patent that should give a “person having ordinary skill in the art” the ability to replicate the invention described above without “undue experimentation”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Claims,&lt;/strong&gt; this is actually the most important part of the patent, the SFLC actually recommends one read a patent from back to front to make sure you understand what the patent wants before moving on.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt;,&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Richard_Fontana"&gt;Richard Fontana&lt;/a&gt; (lawyer, worked on GPLv3, LGPLv3, AGPL, director of OSI),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Bradley_M._Kuhn"&gt;Bradley M. Kuhn&lt;/a&gt; (free software activist, president of Software Freedom Conservancy, previously worked for the SFLC and FSF),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Eben_Moglen"&gt;Eben Moglen&lt;/a&gt; (law and legal history professor at Columbia University and director-counsel and chairman of the SFLC),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://www.linkedin.com/pub/matt-norwood/5/770/a39"&gt;Matthew Norwood&lt;/a&gt; (IP lawyer, previously was counsel at the SFLC),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://www.ravicher.com/"&gt;Daniel B. Ravicher&lt;/a&gt; (lawyer and law professor),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Karen_Sandler"&gt;Karen Sandler&lt;/a&gt; (executive director of the SFC, former director of the GNOME Foundation, former general counsel at the SFLC),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://twitter.com/jamesvasile"&gt;James Vasile&lt;/a&gt; (director of Open Internet Tools Project),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://torekeland.com/about/aaron-williamson"&gt;Aaron Williamson&lt;/a&gt; (IP lawyer for Tor Ekeland).&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;What:&lt;/strong&gt; Chapter 4 of the book &lt;em&gt;A Legal Issues Primer for Open Source and Free Software Projects&lt;/em&gt; put out by the &lt;a href="https://www.softwarefreedom.org/"&gt;Software Freedom Law Center (SFLC).&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Where:&lt;/strong&gt; &lt;a href="http://bizlegfoss-ritigm.rhcloud.com/static/books/foss-primer.pdf"&gt;available for free on RIT’s Business and Legal issues in FOSS course website&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; Latest edition (1.5.2) published June 2008&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="the-good"&gt;The Good&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There are three major ways to handle patent claims brought against you:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Show that you were given the rights to use the patent, probably through a FOSS license (especially the Apache license, which explicitly grants this) or royalty free agreement with the patent holder.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Show that you have not infringed on the claimed patent by working your way backwards through the patents claims.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Show that the patent is actually invalid and thus not enforcible.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A good way to understand how to invalidate a patent claim is to understand how it is claimed to be valid in the first place.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Under patent law, in order for a patent to be valid, the claimed invention must have been &lt;em&gt;useful&lt;/em&gt;, &lt;em&gt;reducible to practice&lt;/em&gt;, &lt;em&gt;novel&lt;/em&gt;, and &lt;em&gt;non-obvious&lt;/em&gt; to a “person having ordinary skill in the art” at the time that the invention was made.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="the-bad"&gt;The Bad&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve said this before about this book, but I think anything this theoretical needs to be tied down and motivated with some concrete examples, which I’m sure exist later in the book part III, but from what I see in the syllabus we will not be getting to that section in the near future if at all. Maybe I’ll get a chance to review it on my own time and make a post about my findings here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The idea that while you are still liable if you didn’t know of a patents existence, you are held under a stricter set of rules (up to 3 times the original punishment!) if they prove you violated the patent knowingly. That’s completely messed up.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The concept of patents as a whole is so messed up right now. I’m not a fan of copyright in general, but at least that is an inclusive IP, patents by their nature require a lot of money to back them and basically set up the playing field for corporations only.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I personally don’t like some of the requirements brought forward by the Apache license (mainly the state changes clause), but it also seems like the only OSI license that includes a patent grant. If I was concerned about something in a code base being patentable, what are my best options besides the Apache license? Should I take out the parts of the Apache that I don’t want (and notify the user that it is a modified license) or add a patent grant to or alongside another permissive license?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The reason why the Creative Commons Zero dedication with license fallback was rejected by the OSI was because of this clause in the limitation’s section:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;a. No trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document.&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;If deleted, this dedication/license seems like it would have been accepted by the OSI, based on the mailing list discussion, is that a good idea to do in practice? What if I added a patent grant like is in the Apache license? Would that fulfill the goals of the question I raised above?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the text it says:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;A patent holder providing code under a FOSS license without an explicit patent license grant, such as GPLv2, would nonetheless probably be held to have granted a license implicitly to recipients of the code, though the scope and coverage of such an implied license would be difficult to establish.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Has this ever been played out in court? How well has the Apache patent grant worked vs. this “implicit” grant from license without a patent grant (GPL, MIT, etc.)?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="final-thoughts"&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Very informative on a topic I initially knew almost nothing about. It both scared and reassured me about the state of patent law in the US. In reality probably next to nothing I write as a developer will be patentable, but just that possibility scares me a lot all the same.&lt;/p&gt;

&lt;p&gt;I give it &lt;strong&gt;19/20th’s&lt;/strong&gt;, just wish it included some examples inline and maybe touched on the international issue a little bit, but this is a big topic and they covered it well in as concise fashion and I respect that.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Writing Command Line Tools with Ruby</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/commnad-line-tools-with-ruby/"/>
    <id>http://dropofwill.herokuapp.com/2015/commnad-line-tools-with-ruby/</id>
    <published>2015-02-13T12:16:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;I’ve written a lot of Ruby code over the years from web applications, to rack frameworks, to rake tasks, even packaged a few up as gems, but one thing I’ve never done is write a command line tool directly in ruby. This post just sums up my initial foray into making Ruby cli tools, as usual with Ruby it’s not nearly as hard as it sounds.&lt;/p&gt;

&lt;h2 id="the-basics"&gt;The Basics&lt;/h2&gt;

&lt;p&gt;Typically when you write a ruby script you execute it with the Ruby command followed by a file path, like so:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ruby ../path/to/some_example.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But that puts a lot of weight on the user, they need to know 1) this is a Ruby program, 2) where it was ‘installed’, and 3) the file extension for Ruby. The API we want is this:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ some_example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To accomplish this we first need to add a ‘shebang’ to the top of our main entry point to the application, like this:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line tells the shell how we want the following file interpreted. We could hard code a path to ruby, but by using the env dir we let the user’s shell decide what ruby is, this way people can install ruby however they want and our program will still run. To run the program directly we also need to make it executable:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ chmod +x ../path/to/some_example.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now the program can be run without specifying Ruby:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ../path/to/some_example.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or we can optionally leave off the Ruby extension (.rb) and run it without any knowledge that it is Ruby under the hood:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mv ../path/to/some_example.rb ../path/to/some_example
$ ../path/to/some_example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what about that annoying &lt;code&gt;../path/to/&lt;/code&gt; nonsense, the user shouldn’t have to even know, much less have to type the full path to the program to run it. To solve this we have two main options (though there are certainly a number of ways to accomplish this).&lt;/p&gt;

&lt;p&gt;The first and ‘easiest’ approach is to simply add the executable to the users PATH either in the shell, a init script, or by typing it right in the shell:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ export PATH=/abs/path/to/some_example:$PATH
$ some_example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This prepends our code to the lookup PATH ($PATH is a variable for the current PATH, the colon separates different parts of the PATH) so that we don’t need to know where the code is located in order to execute it.&lt;/p&gt;

&lt;p&gt;This meets our original requirements, but comes with a number of problems. Are we going to make the user manage the PATH themselves? Is this run with an install shell script? What it the users’ shell of choice doesn’t use the &lt;code&gt;export&lt;/code&gt; API? What if they want to move where the install directory is on their computer? All these questions lead us to believe there must be a better or at least more standardized approach to this.&lt;/p&gt;

&lt;p&gt;And as it turns out there is! The people behind RubyGems have put a lot of thought into this, so that when you create a gem you can define a set of files that can be used as executables and it then copies them to &lt;code&gt;#{ruby-prefix}/bin/{#gem_name}&lt;/code&gt;, which is already added to their PATH during the installation of Ruby and is managed by tools like rbenv, chruby, or RVM so that you don’t have to.&lt;/p&gt;

&lt;p&gt;The downside to this is that their is a bit of extra boilerplate needed to comply with the whole gemspec standard, but in the long run this is well worth the extra startup time. Luckily the bundler gem, a popular gem manager (that itself is a gem), comes with a scaffold-er to keep the amount of boilerplate you need to write to a minimum as well as giving you a set of best-practices/conventions that the rest of the Ruby community often follows. To create a new project run &lt;code&gt;bundler gem #{your_gem_name_here}&lt;/code&gt;, which initializes a git repo and gives us the following file structure:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tree
├── Gemfile
├── LICENSE.txt
├── README.md
├── Rakefile
├── gem_cli.gemspec
└── lib
    ├── gem_cli
    │   └── version.rb
    └── gem_cli.rb

2 directories, 7 files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default it gives you a copy of the MIT license, this is by far the most popular license within the Ruby community, but you are free to change it to whatever you like (just make sure you update those changes in your gemspec as well). You should also add your dependencies in the Gemfile (if you have any), add your code to the &lt;code&gt;lib/&lt;/code&gt; dir, and then create a new &lt;code&gt;bin/&lt;/code&gt; dir with the cli code (which hopefully require’s whatever the rest of your lib does for DRY purposes). Then it’s just a matter of updating the &lt;code&gt;*.gemspec&lt;/code&gt; file to meet your requirements. The key bit that bundler gives us by default is what does the making &lt;code&gt;bin/&lt;/code&gt; executable business:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  spec.files         = `git ls-files -z`.split("\x0")
  spec.executables   = spec.files.grep(%r{^bin/}) { |f| File.basename(f) }
  spec.test_files    = spec.files.grep(%r{^(test|spec|features)/})
  spec.require_paths = ["lib"]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line adds only files tracked by git (a classic error is not adding changes to git before building if you leave this line in), you can of course use any other Ruby/shell code to grab the paths you want. The second line does the job of telling RubyGems what files to add to the users path, basically it looks through the list of files regex-ing for the bin and adding the files in that dir. Of course if you don’t want to put your executables in &lt;code&gt;bin/&lt;/code&gt;, you could rename that dir and regex for that something different here. Bin is just a convention of course and the &lt;code&gt;*.gemspec&lt;/code&gt; file is just a plain old Ruby file, so anything you want to add here will work just fine.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Blink project: Hacking on an Arduino</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/blink-project-hacking-on-an-arduino/"/>
    <id>http://dropofwill.herokuapp.com/2015/blink-project-hacking-on-an-arduino/</id>
    <published>2015-02-10T21:35:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;For my Physical Computing &amp;amp; Alt Interfaces class we had to use an Arduino (I have the latest Uno) to control LED(s) in a non-trivial way. I knew I wanted to make some kind of LED matrix, but didn’t know how big of one I could make on my half sized breadboard and limited number of pins. What I ended up with was a 16 LED (4x4) matrix controlled by just 8 pins, each of which can be individually controlled.&lt;/p&gt;

&lt;p&gt;&lt;img alt="rough schematic of the led matrix setup" style="width: 30%; float: right" src="images/matrix_scheme-d328ff96.png" /&gt;&lt;/p&gt;

&lt;p&gt;So how does that work? Basically you wire it up so each row and column are interconnected and each has it’s own, you can get a rough idea how it works in my simplified schematic to the right. To light up an LED all you need to do is set the row or column that its anode is connected to HIGH to give it current and then set the row or column that its cathode is connected to LOW grounding the circuit. This way even though 4 LED’s are getting current and 4 LED’s are grounded, only 1 is completing the circuit and lighting up. The code would look something like this:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// pins for my anodes
int row[] = {3,5,6,9};
// pins for my cathodes
int col[] = {10,11,12,13};

// Prime all the LED's
void led_setup() {
  for (int i = 0; i &amp;lt; 4; i++) {
    pinMode(row[i], OUTPUT);
  }
  for (int j = 0; j &amp;lt; 4; j++) {
    pinMode(col[j], OUTPUT);
  }
  allOff();
}

// Shortcut to turn off all the LEDs
void allOff() {
  for (int i = 0; i &amp;lt; 4; i++)  {
    digitalWrite(row[i], LOW);
  }
  for (int i = 0; i &amp;lt; 4; i++)  {
    digitalWrite(col[i], HIGH);
  }
}

// And finally light the LED!
void lightPin(int i, int j) {
  digitalWrite(row[i], HIGH);
  digitalWrite(col[j], LOW);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if we want to light up multiple LED’s at once? Well, that depends, if they’re on the same row or column than there’s no problem we can light them up as before. But what if they’re are diagonally adjacent (as in (0,0) and (1,1)), by turning on the pins to those 4 pins we are completing the circuit for 4 LEDs instead of just the two we wanted!&lt;/p&gt;

&lt;p&gt;&lt;img alt="rough schematic of the led matrix setup" style="width: 100%; margin-bottom: 1em;" src="images/matrix_overview-a9881ac3.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;One way to deal with this is to light just one LED at a time, but swap back and forth between them faster than the human eye can detect. This works quite well actually, it ends up becoming a balancing act between giving enough time for the current to light up the LED and not waiting long enough for humans to be able to detect the flicker. In my own experience the best value varies with the LED and resistors that you happen to be using, so you will probably have to experiment. In the end I went with 2 milliseconds for the best balance.&lt;/p&gt;

&lt;p&gt;So how did I manage to stuff all of this wiring onto a half-sized breadboard? The trick is to use the built in wiring that the breadboard gives you. Put all of the your anodes or cathodes on the same row (whichever ones you decide to line up with the breadboards internal wiring), and then place the opposite lead one or two slots over (alternate, remember these should not share a row, but rather a column). With this technique you only need 4 wires to setup the rows (shoot the gap in the middle) and it only takes up 3 breadboard rows each, which leaves you just enough room to wire in the columns, which are a little bit more tricky, but doable because you were so space efficient with the rows. That was probably a fairly confusing, hopefully the following pictures should clear it up.&lt;/p&gt;

&lt;p&gt;&lt;img alt="rough schematic of the led matrix setup" style="width: 100%; margin-bottom: 1em;" src="images/matrix_breadboard-b02b8372.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="rough schematic of the led matrix setup" style="width: 100%; margin-bottom: 1em;" src="images/matrix_closeup-57d420bf.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;So cool we’ve got an LED matrix what to do with it? The first thing I did was make a little bar graph to test how well I could control the individual LEDs. This evolved into something like a music visualizer, only it’s not visualizing a music signal, just the Arduino’s random number generator.&lt;/p&gt;

&lt;p&gt;That was cool, but I also wanted to make something a little more interactive, so I hooked up a potentiometer to a separate 5V power source and an analog pin. From there I use the signal from the potentiometer to steer one light as it moves about the screen. In the script your able to set the speed, degrees of control, and whether it wraps or bounces off the walls. It’s kind of fun to play with, but would greatly benefit from another one or two rows of LEDs to wander about on, but as is it is a pretty cool proof of concept.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/dropofwill/2596fab1d9236557d862"&gt;All the code used in this project is available as a gist on my github&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Initial thoughts for an MPD project</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/source-code-review-of-mpd-and-mpd-wrappers/"/>
    <id>http://dropofwill.herokuapp.com/2015/source-code-review-of-mpd-and-mpd-wrappers/</id>
    <published>2015-02-05T16:30:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;For my Software Development in Linux class we are making one large project over the course of the class and then packaging it up for distribution at the end (probably Debian, RPM, and AUR).  This is a little bit of a paradigm shift for me personally, as for most of my projects distribution means pushing to a Heroku instance, so I’ve had to brain storm some new non-web-based projects. I’ve come up with two basic trains of thought either a better time-tracking/Freshbooks integration for taskwarrior (the current ones are all bare-bones) or any number of music/analytics ideas for the music players, specifically MPD.&lt;/p&gt;

&lt;p&gt;For now I’ve decided to just review MPD, its current state, and what options are available to me in terms of wrappers (preferably Ruby wrappers, my scripting language of choice). The goal here is to just establish what the MPD landscape looks like so that I can effectively scope an 11-12 week project.&lt;/p&gt;

&lt;h2 id="the-music-player-daemon"&gt;The Music Player Daemon&lt;/h2&gt;

&lt;p&gt;First off it’s important to establish what MPD is and isn’t. It is a music player that works with a server-client architecture. It plays music, organizes playlists, and maintains a database of music. What it isn’t is a client to play with, you need anyone of many clients to do this from ncurses-command line based players to GUI players that resemble iTunes. In this way it does one thing well and very efficiently, which is why I’ve decided to target it as the home for any music-based apps I want to create.&lt;/p&gt;

&lt;p&gt;So where to start? There is extensive documentation of the C++ inner workings of &lt;a href="http://www.musicpd.org/doc/user/"&gt;MPD here&lt;/a&gt;. One important part of any integration with other music programs is playlist formats, MPD supports &lt;a href="http://www.musicpd.org/doc/user/playlist_plugins.html"&gt;&lt;code&gt;embcue&lt;/code&gt;, &lt;code&gt;m3u&lt;/code&gt;, &lt;code&gt;extm3u&lt;/code&gt;, &lt;code&gt;pls&lt;/code&gt;, and &lt;code&gt;xspf&lt;/code&gt;&lt;/a&gt; through a plugin system. It uses m3u by default, which is an extremely simple format consisting of only the time in seconds, the artist, the name, and the file path.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#EXTM3U

#EXTINF:123, Sample artist - Sample title
~/music/sample_artist/sample_song.mp3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is nice from a readability standpoint, but there is problem, it hard codes all the file paths, which makes it hard to port from one platform to another. That’s one thing that &lt;code&gt;.xspf&lt;/code&gt; &lt;a href="http://xspf.org/xspf-v1.html"&gt;tries to remedy.&lt;/a&gt;, it uses a unique identifier (mbid from MusicBrainz for example) to resolve different file locations to the same unique identifier, here’s a basic example file:&lt;/p&gt;

&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;playlist&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://xspf.org/ns/0/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;trackList&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;track&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Song Title&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;identifier&amp;gt;&lt;/span&gt;http://musicbrainz.org/track/7fe96b15-5608-430e-ad25-77a01353c5d9.html&lt;span class="nt"&gt;&amp;lt;/identifier&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;location&amp;gt;&lt;/span&gt;music/foo.mp3&lt;span class="nt"&gt;&amp;lt;/location&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;location&amp;gt;&lt;/span&gt;alternate/music/foo.mp3&lt;span class="nt"&gt;&amp;lt;/location&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/track&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/trackList&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/playlist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what libraries are already out there to further investigate?&lt;/p&gt;

&lt;h3 id="ruby-libraries"&gt;Ruby Libraries&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/marcransome/Spfy"&gt;Spfy&lt;/a&gt; - a Ruby Xspf parser (last commit 03/2014)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rubygems.org/gems/xspf/versions/0.4.1.1"&gt;Xspf&lt;/a&gt; - a Ruby Xspf parser (last commit 04/2007), source code forge is down, so this one is fairly rusty.&lt;/p&gt;

&lt;p&gt;Since the .xspf spec is simple, well formed XML, is using one of these Ruby wrappers necessary? Or could I just use the great, built in XML support?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/robinst/taglib-ruby"&gt;taglib-ruby&lt;/a&gt; a wrapper around the C++ library &lt;a href="https://github.com/taglib/taglib"&gt;TagLib&lt;/a&gt; - meta data manager for audio files (last commit 08/2014 &amp;amp; 02/2015 respectively)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/archSeer/ruby-mpd"&gt;ruby-mpd&lt;/a&gt; a ruby wrapper around MPD, which itself was the fork librmpd (last commit 12/2014)&lt;/p&gt;

&lt;p&gt;[mpd_client(https://github.com/mamantoha/mpd_client) a ruby wrapper around MPD, a port of the python-mpd library (last commit 12/2014)&lt;/p&gt;

&lt;h3 id="other-stuff"&gt;Other Stuff&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://soundiiz.com"&gt;Soundiiz&lt;/a&gt; is doing something similar to what I want to, though it seems to be completely web based and closed source, which is sad to see.&lt;/p&gt;

&lt;p&gt;The web api’s for &lt;a href="https://developer.spotify.com/web-api/endpoint-reference/"&gt;Spotify&lt;/a&gt;, &lt;a href="http://developer.echonest.com"&gt;Echonest&lt;/a&gt;, &lt;a href="http://www.last.fm/api/show/user.getTopTracks"&gt;Last.fm&lt;/a&gt;, &lt;a href="http://www.last.fm/api/show/user.getTopTracks"&gt;Grooveshark&lt;/a&gt;, &lt;a href="https://developers.google.com/youtube/v3/docs/playlists"&gt;YouTube&lt;/a&gt;, &lt;a href="http://www.rdio.com/developers/docs/"&gt;Rdio&lt;/a&gt;, &lt;a href="https://musicbrainz.org/doc/Beginners_Guide"&gt;MusicBrainz&lt;/a&gt;, and how to resolve content between them.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Initial Review of a FOSS Primer</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/initial-review-of-a-foss-primer/"/>
    <id>http://dropofwill.herokuapp.com/2015/initial-review-of-a-foss-primer/</id>
    <published>2015-02-03T20:25:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;This section of the book is focused on copyrights and licensing issues facing FOSS projects. It starts at a high level explaining why a license is necessary and then works its way down to the details of choosing the correct license, dealing with copyright in teams and organizations, and finally how to deal with copyright violations from a FOSS perspective.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Richard_Fontana"&gt;Richard Fontana&lt;/a&gt; (lawyer, worked on GPLv3, LGPLv3, AGPL, director of OSI),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Bradley_M._Kuhn"&gt;Bradley M. Kuhn&lt;/a&gt; (free software activist, president of Software Freedom Conservancy, previously worked for the SFLC and FSF),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Eben_Moglen"&gt;Eben Moglen&lt;/a&gt; (law and legal history professor at Columbia University and director-counsel and chairman of the SFLC),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://www.linkedin.com/pub/matt-norwood/5/770/a39"&gt;Matthew Norwood&lt;/a&gt; (IP lawyer, previously was counsel at the SFLC),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://www.ravicher.com/"&gt;Daniel B. Ravicher&lt;/a&gt; (lawyer and law professor),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Karen_Sandler"&gt;Karen Sandler&lt;/a&gt; (executive director of the SFC, former director of the GNOME Foundation, former general counsel at the SFLC),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://twitter.com/jamesvasile"&gt;James Vasile&lt;/a&gt; (director of Open Internet Tools Project),&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href="https://torekeland.com/about/aaron-williamson"&gt;Aaron Williamson&lt;/a&gt; (IP lawyer for Tor Ekeland).&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;What:&lt;/strong&gt; Foreward - Chapter 2 of the book &lt;em&gt;A Legal Issues Primer for Open Source and Free Software Projects&lt;/em&gt; put out by the &lt;a href="https://www.softwarefreedom.org/"&gt;Software Freedom Law Center (SFLC).&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Where:&lt;/strong&gt; &lt;a href="http://bizlegfoss-ritigm.rhcloud.com/static/books/foss-primer.pdf"&gt;available for free on RIT’s Business and Legal issues in FOSS course website&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; Latest edition (1.5.2) published June 2008&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="the-good"&gt;The Good&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This cleared up some of my confusions with the GPL, especially around the server/client relationship? Say my backend runs on GPL’d code, does that mean it has to serve a static copy of the code on the site somewhere? It turns out if you do not distribute the software, you do not have to distribute the source code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The description of copyright enforcement was interesting. Something I’ve always wondered is how one enforce GPL restrictions, especially when the violation occurs in proprietary code (how does one know for sure the binaries contain your code? See Berkeley v. FSF).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deciding how to transfer copyright of code in a project with multiple people seems almost important than the choice of license (what good is your license if it you didn’t have the rights to it to begin with?). It’s important to remember that your employer may own everything you create, even on your own time and on your own computer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="the-bad"&gt;The Bad&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The sections on the general GPL and BSD/permissive licenses were too short, I guess since this is just a primer they didn’t want to go line by line or anything like that. However, as someone already aware of the basics of copyleft/permissive, I was hoping for a little more in the way of details and use cases, which seemed to me what was given when talking about the specific licenses of LGPL and AGPL.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It seemed pretty dismissive of Permissive licenses. Yes, it does make sense to group them together, but are patent, trademark, attribution, changelog rules really equivalent to saying they “differ in only minor ways”? I realize copyleft people only think about preserving freedom, but there are a ton of other issues involved with license choice.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It could use more motivating examples, most legal systems are fundamentally built on past rulings, so understanding past issues related to licensing differences could shape a developer’s opinion on what is important for their particular project.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Copyright expires after X-years. Doesn’t that mean that copyleft licenses also expire after that amount of years as well? Why then is it called a “&lt;em&gt;forever&lt;/em&gt; free” license?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A footnote in the section on the AGPL mentions that client side code (via JavaScript, CSS, and HTML) is distribution of software “in the strictest sense”. As the creation of frontend code becomes more and more complex the result sent to the end user begins to look more and more like binaries, complete with a build or compilation step (via preprocessors, templating systems, dependency managers, minfiers, and the like). What this means is the code sent to the browser is much less usable than the source the developer used to make, while not as difficult as reverse engineering a binary, figuring out a complex program with 2 letter variables and function inlining is no easy task. So I guess my question is what counts as “source code” when it comes to frontend code under the GPL?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The OSI and FSF disagree on what are valid open source licenses, I’m thinking specifically about the Creative Commons 0 here (which generated a lot of discussion on the OSI mailing list, here, here, and here, before it was eventually rejected). Why should I trust one source over the other in matters of such disagreement?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What rights do you have in an employee/employer relationship? Can they really own everything you create? Are there ways to circumvent this, like say anonymous contributions?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="final-thoughts"&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Informative and I look forward to reading the rest of the book, especially the patents and trademark sections. I think a few more motivating examples and a little more depth in the explanations could really improve this guide in terms of usefulness. That said it did answer a lot of unanswered questions I’ve had as is, so it certainly is worth taking a look at if these things are relevant to what you do or you find this stuff interesting.&lt;/p&gt;

&lt;p&gt;4.75/5&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Review of Everything is a Remix</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2015/review-of-everything-is-a-remix/"/>
    <id>http://dropofwill.herokuapp.com/2015/review-of-everything-is-a-remix/</id>
    <published>2015-02-03T20:24:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;Everything is a Remix&lt;/em&gt; is a documentary that explores the source of creativity by looking at examples from our past: music, movies, computers, and more. It takes the stand that everything (even down to our biology) is the result of remix, a metaphor taken from music sampling that the documentary defines as an amalgamation of copying, transforming, and combining.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt; &lt;a href="https://twitter.com/remixeverything"&gt;Kirby Ferguson&lt;/a&gt;, a New York based film-maker&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;What:&lt;/strong&gt; A 4-part documentary that clocks in at just over half an hour.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Where:&lt;/strong&gt; There are lots of places to watch this on the web (along with a bunch of remixes), but this is &lt;a href="https://www.youtube.com/watch?v=coGpmA4saEk"&gt;a link to the full film on youtube.&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; First part was released in 2010, last part was released in 2012.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="the-good"&gt;The Good&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;While the film definitely has a thesis it argues for, when necessary it shows the other side of the story. I’m thinking especially in the case of the history of patents, instead of setting up a straw man to burn down, he makes the best case for patents I’ve heard in a while, showing the historical reasoning behind them and then shows how the situation today has strayed from those original goals. This makes the film stronger as a whole.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The film emphasizes attribution, especially Zeppelin’s lack of it in a lot of their music, even in straight up covers. This parallels with what Remy is always talking about, “attribution is the coin of FOSS”. Like it said in the film at least they didn’t try to sue everyone else who did the same to them, something that is not always the case, he mentions especially Paul Allen and Steve Jobs, people who openly admit to copying other people’s work, but also viciously went after every law suit possible when the shoe was on the other foot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The parallels between Darwinian and social evolution, along with the mantra of ‘copy, combine, transform” were the strongest part of the film, at least in terms of presenting his argument.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="the-bad"&gt;The Bad&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Well, at least when taken literally everything isn’t a remix, because remix is a technical term. Whenever something “new” is recorded it is not a remix, even if new just means webcam footage of a bedroom rendition of &lt;a href="http://www.guitarnick.com/smoke-on-the-water-deep-purple-guitar-lesson-tab.html"&gt;&lt;em&gt;Smoke on the Water&lt;/em&gt;&lt;/a&gt;. A remix without samples is not a remix no matter how unoriginal it may be. Led Zeppelin and Girl Talk are fundamentally different in that respect. I get that he is really using remix as a metaphor, but I think it weakens the argument, because he never really makes that explicit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I think a stronger thesis statement would look like the following bold text (which is a quote from Gilberto Gill, from &lt;a href="/2014-10-22-rip-a-remix-manifesto"&gt;&lt;em&gt;RiP: A Remix Manifesto&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Sharing is the nature of creation, it doesn’t happen in isolation. &lt;strong&gt;No one creates in a vacuum, everything comes from something else.&lt;/strong&gt; It’s a chain reaction.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;This idea of chain reaction covers situations with new work as well, because “no one creates in a vacuum”, what we create is shaped by where we’re from, our culture, the people we know, and the media we consume. Even is someone is not directly sampling a track, it’s not possible to create something without influences. I think the film would have been stronger if it explored the differences and similarities between influences, covers, and remixes. I think there is no fundamental ethical distinction, but there is a technical one, and the film fails to notice this, which I think makes it weaker as a whole.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I wish it explored some topics more in depth, I realize this is a short/episodic documentary format and he wanted to cover a lot of ground, but in order to cover music, movies, technology, and biology all in 30 minutes is a tough task and the ending left me wanting more.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Is some form of patent law (or intellectual property) fundamental to funding R&amp;amp;D?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How does the rest of the class feel about copyright and patent laws? Are they necessary for progress? Personally I feel like they are unnecessary, but I’d like to hear more arguments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are the Zeppelin and Tarantino examples fundamentally different? And do you think they are positive or negative examples of “remix”? Basically how important is attribution in creative contexts?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="final-thoughts"&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Well put together, makes a point without making a preach to the choir type presentation. I would have changed some of the basic rhetoric and moved it a little different direction (see The Bad), but really I’m being quite nit-picky and it is certainly worth a half hour of your time to sit down and watch it.&lt;/p&gt;

&lt;p&gt;4/5&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Geocoding my Last.fm Data</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/geocoding-my-lastfm-data/"/>
    <id>http://dropofwill.herokuapp.com/2014/geocoding-my-lastfm-data/</id>
    <published>2014-12-16T20:15:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;One question that often comes to my mind is how does geographical location (and the culture that comes with it) influence the band’s music and therefore my taste as well. So that’s why I decided to use this data to create a cartogram of my listening data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/dropofwill/d3-lastfm-geo-viz"&gt;If you don’t want to read this run down check the code out here on Github.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.last.fm"&gt;Last.fm&lt;/a&gt; is a social music service that as one of it’s branches tracks user’s listening history and makes it publicly available through an API. I personally have had Last.fm setup on my Spotify account since March 17th, 2012 with other devices added at different points between now and then (so this is actually a small subset of my total listening history). This results in a dataset of 1,017 artists and 22,285 songs played.&lt;/p&gt;

&lt;p&gt;Unfortunately, Last.fm doesn’t include location information directly, even though it is usually contained somewhere in the artists bio page. Luckily, &lt;a href="http://the.echonest.com"&gt;Echonest&lt;/a&gt; provides location data (along with a lot’s of other interesting features) and it includes a foreign key identification system that uses the same identifier as Last.fm. Running this on my listening data returned results in about an 80% success rate, with most of the misses being local bands or bands with only a couple of plays. There were a few big exceptions though that may skew the results, the top 4 for instance had playcounts of over a hundred, including my most played artist (a composer that would have increased Iceland’s counts significantly).&lt;/p&gt;

&lt;p&gt;I then fed that data into Google’s geocoding API to get precise latitude and longitude numbers to project on to the map. This had a 100% “success rate” because the API will always do the best it can (even if that means a point in the center of the earth), in general in mainly passed the eye test, with only one definitely wrong geocoding that I uncovered (Giraffes? Giraffes! are not really from the middle of Russia, but rather a suburb of Boston).&lt;/p&gt;

&lt;h3 id="visualization-approach"&gt;Visualization Approach&lt;/h3&gt;

&lt;p&gt;I knew I wanted to use a cartogram to combine playcounts and geolocation, but one problem I didn’t consider prior to getting the data was just how sparse my listening data really is. Less than 10% of countries had a single play and about 68% of plays were concentrated in just two countries, the United States and Great Britain. Under most cartogram approaches this would lead to almost certainly unrecognizable geographies, because the scale differences would just be too great.&lt;/p&gt;

&lt;p&gt;So I decided to take a hybrid approach: a cartogram aspect for the playcount encoding placed on top of a normal world map to provide context. From there I made the countries that didn’t have any artist data transparent, so that they preserved the context, but didn’t overpower the cartogram aspect of the visualization. This also had the side effect of making it clear which countries have playcount data. However, this made the cartogram blend in with the map, so I gave each hexagon a dark border so that they remained the focal point.&lt;/p&gt;

&lt;p&gt;This was an improvement, but there were still issues with the force layout, hexagons strayed far away from their origins losing a lot of the original geographical meaning. I improved this by tweaking the attributes of the layout (more friction, less response to collisions, etc.), but I still wasn’t satisfied. So I decided to have two different layouts that the user could swap. The initial layout preserves the geographic data at the expense of overlap, to keep the stacks readable in dense areas I decided to make the hexagons slightly transparent and then sorted the DOM by size. This made it so every hexagon was still visible and more opaque areas visually implied the density of their artist data.&lt;/p&gt;

&lt;h2 id="interactivity"&gt;Interactivity&lt;/h2&gt;

&lt;p&gt;Zoom In/Out: either scroll wheel/touch pad or on screen buttons.&lt;/p&gt;

&lt;p&gt;Pan: Click and drag to move the map around.&lt;/p&gt;

&lt;p&gt;Reset: click the on screen button to go back to the default zoom and pan.&lt;/p&gt;

&lt;p&gt;Zoom to a country: Click a given country to zoom to the countries bounding box and bring up country details in the text box. Click on it again or the Reset button to go back.&lt;/p&gt;

&lt;p&gt;Lock Gestures: Lock gestures if they make scrolling a pain (e.g. on a touch device).&lt;/p&gt;

&lt;p&gt;Spread Artists: toggle between the two cartogram views.&lt;/p&gt;

&lt;p&gt;Hover Artist Hexagon: Brings up the data about the given artist and their country.&lt;/p&gt;

&lt;h2 id="data-encoding"&gt;Data Encoding&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Spatial Distribution:&lt;/em&gt; Location of the bands relative to each other and the world as a whole.
Encoding: One view has them placed as accurately as the data allowed (at the expense of overlapping data points) and the other view places them as close to their location without any overlap (using collision detection and a force layout).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quantitative:&lt;/em&gt; Play count per artist.
Encoding: Relative size of the hexagons and text that displays the absolute number on hover.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quantitative:&lt;/em&gt; Play count per country and Echonest artist familiarity and “hotttnesss”
Encoding: Text that displays on hover.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Categorical:&lt;/em&gt; Which geographical regions the artists are from.
Encoding: Color of the hexagons match the countries they are from.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Categorical:&lt;/em&gt; Echonest genre data
Encoding: Text that displays on hover.&lt;/p&gt;

&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;

&lt;p&gt;Blog Posts/Examples:&lt;/p&gt;

&lt;p&gt;One of Mike Bostock’s many insightful walkthroughs, this time on &lt;a href="http://bost.ocks.org/mike/map/"&gt;map creation from raw shape files&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ralphstraumann.ch/blog/2013/08/reworked-versions-of-my-hexagonal-population-cartogram/"&gt;This whole blog is fairly insightful&lt;/a&gt;, but this post on the creation of a hexagonal cartogram was particularly useful.&lt;/p&gt;

&lt;p&gt;Jason Davies is a major contributor to D3 and &lt;a href="http://www.jasondavies.com/maps/bounds/"&gt;his articles on maps and projections were useful.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.gislounge.com/area-cartograms-explored/"&gt;This was a good overview of cartogram techniques.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And another &lt;a href="http://kelsocartography.com/blog/?tag=cartogram"&gt;good overview of cartogram techniques.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href="http://bl.ocks.org/mbostock/4055889"&gt;pseudo Demers cartogram example&lt;/a&gt;, helped me grok collision detection with quadtrees and force layouts mixed with geographic projections.&lt;/p&gt;

&lt;h2 id="libraries"&gt;Libraries:&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://d3js.org"&gt;D3.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/d3/d3-geo-projection"&gt;D3.geo.projection.js&lt;/a&gt;, this plugin includes the Kavrayskiy projection I used for a nice world map isn’t provided with the D3 library (to keep it light).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mbostock/topojson"&gt;Topojson&lt;/a&gt;, handles the GeoJson files to get them in a format D3 can use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mbostock/queue"&gt;Queue.js&lt;/a&gt;, make sure asynchronous requests are handled in a controlled, predictable manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://colorbrewer2.org"&gt;Colorbrewer&lt;/a&gt;, for the map’s color scheme.&lt;/p&gt;

&lt;h2 id="future-work"&gt;Future Work&lt;/h2&gt;

&lt;p&gt;Dynamic Data: Last.fm has a large user base, which seems to be fond of data visualizations and may be interested in this sort of map. The major hold up with that is the data gathering step, for my data set of ~1,000 artists and ~22,000 songs it took about one and a half hours to collect, which obviously wouldn’t be a successful in a dynamic environment (“Come back in two hours to see your results.”) and this would just be compounded if multiple users hit the system at once.&lt;/p&gt;

&lt;p&gt;One potential fix for this would be to use a data store to keep track of the Echonest and Google Maps API calls, since the data in these responses is unlikely to change. This cut down data gathering time exponentially since Last.fm’s rate limiting is significantly smaller than Google and Echonest. It could be prepopulated with 2,500 artists per day (Google daily cap) that could be gathered off of a breadth first search of Last.fm’s artist tree.&lt;/p&gt;

&lt;p&gt;Different Cartogram Representation: forces and collision detection make a decent cartogram, but as it is a non-deterministic approach occasionally it’s resulting state or how it got there are little annoying. One example I stumbled upon fairly late in the project was this &lt;a href="http://vallandingham.me/force_talk/#64 and http://fathom.info/topovsgeo"&gt;force snap to grid approach&lt;/a&gt;, which demonstrates mapping x/y or lat/lng coordinates to different grid spaces (including hexagonal). I can envision representing each artist as a graph of connected nodes (all of equal area) outlined and roughly aligning to the their country of origin. This would still allow for charge forces to separate clusters while alleviating the jitter problem that comes with using collision detection (since all node would be the same size).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>C-Graph: A new tool to grok C-source code</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/c-graph-a-new-tool-to-grok-c-source-code/"/>
    <id>http://dropofwill.herokuapp.com/2014/c-graph-a-new-tool-to-grok-c-source-code/</id>
    <published>2014-12-14T20:43:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;A joint post by &lt;a href="http://brendan-w.com/"&gt;Brendan Whitfield&lt;/a&gt; &amp;amp; Will Paul&lt;/p&gt;

&lt;p&gt;Source code is often the most up to date documentation available, but while code is written in a linear fashion, the execution is a network of calls that often jump across files. Known as a function call graph, this data can help programmers quickly grasp the structure of a program. How can  we use visualization to make the process of grokking source code easier?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Source Code: &lt;a href="https://github.com/brendanwhitfield/cgraph"&gt;https://github.com/brendanwhitfield/cgraph&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;Live Example: &lt;a href="http://cgraph.herokuapp.com/"&gt;http://cgraph.herokuapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The concept of a call graph is not new, and there are several open source tools that perform such a task. Yet, after only a short time with some of these applications, many design limitations hamper their use, or clarity in visualization. The flaws range from bad workflow to information overload, all of which C-Graph attempts to address. However, before any visualizations can be made, the data for them must be generated.&lt;/p&gt;

&lt;p&gt;To construct a call graph, there are two predominant solutions. The first is to dynamically build the graph through careful monitoring of the program during execution. This will show how the program truly behaves, however it is often difficult to implement. For this reason, most software resorts to statically constructed graphs. Static graphing is a simple operation of parsing the source code, and matching functions calls to definitions. While this solution has drawbacks (namely, the inability to resolve function pointers), it is straight-forward to implement, since it leverages the abilities of existing parsers. For sake of project scope, C-Graph operates statically.&lt;/p&gt;

&lt;p&gt;C-Graph was originally slated to use a pre-existing graphing utility as a back-end. However, after some experimentation, each utility was rejected because it failed to deliver some piece data or functionality. In particular, the ability to parse a segment of source code without its dependant libraries was a feature that did not exist in any tool. In order to easily integrate with external code repositories (such as GitHub), a custom parser was designed to suit this need. Instead of doing a full syntax parse of the user’s code (and dependant headers), the system only searches for calls and definitions. Once located, they can be linked by name and location. The C language was chosen specifically for its ease and simplicity in linking. Unlike other languages, where functions of the same name are rampant, extern C functions must carry globally unique names, thus allowing it to be linked quickly.&lt;/p&gt;

&lt;p&gt;Once the data is generated from the user’s code, a visualization can be custom built. Since the data structure is fundamentally a graph, the obvious choice for visualization was a force layout. However, with the graph alone, there is no obvious connection between the graph and the code. A typical workflow would have to entail switching back and forth between a text editor and the call graph, searching for function definitions as they appear. To remedy this problem, the graph is accompanied by a pane that displays files. The user can simply click any node in the graph, and instantly be presented with the connected code. This solution allows side-by-side code and graph viewing, which dramatically helps the user traverse the source code as well as the graph.&lt;/p&gt;

&lt;p&gt;One of the frequent problems with traditional call graphs is that they are simply static images. All of the complexity is thrown at the user immediately, which makes it hard for a viewer to get a high level overview of how the program works. Rather than viewing the entirety of the code at such a microscopic level, C-Graph implements a binning system, where the user can expand and collapse whole files into their composite functions. This interactivity is key to creating an understandable visualization of a potentially messy dataset. This approach was inspired by Ben Shneiderman’s classic visualization mantra “overview first, zoom and filter, then details on demand.”&lt;/p&gt;

&lt;p&gt;The design of the graph itself was kept extremely simple, in order to better accommodate the deluge of information it must display. Small circles represent individual functions, and accumulate into larger circles when grouped into files. The linkages between nodes vary in weight to display the number of times a call to the same function or file has been made, while arrows encode the direction of the call. Since sometimes the functions spread out and have similar colors we used convex hulls of the same color to keep them visually grouped together even after expansion.&lt;/p&gt;

&lt;p&gt;Other alternatives were considered, but most were ultimately rejected due to over complication. For instance, color and sloping link weights were considered as possible methods for encoding direction, but arrows were ultimately chosen because of the small footprint. Even at the file level, it is exceptionally easy for nodes to become obscured, so great care was taken to minimize all unnecessary graphics. As another way to combat the noise of all the function calls we implemented hover highlighting, such that when the mouse is over a node the rest of the links fade out so that the focal point is just on the calls from that particular function.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Setting up a nice UNIX Ruby dev env</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/setting-up-a-nice-unix-ruby-dev-env/"/>
    <id>http://dropofwill.herokuapp.com/2014/setting-up-a-nice-unix-ruby-dev-env/</id>
    <published>2014-12-10T01:05:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;Setting up a Ruby environment is deceptively simple. Easy to do, hard to maintain. The two major players, RVM and rbenv, offer more than the typical user needs or can possibly understand. Here I walk you through my setup using tools that do one thing and do it well. Coincidently all these tools that I use were written by the same guy/girl who goes by the handle Postmodern.&lt;/p&gt;

&lt;p&gt;So what are our goals coming out of this setup?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A way to easily install new versions of Ruby without conflicting with and system versions or each other.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A way to easily switch between versions on a per project basis, preferably automatically so we can set it and forget it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Optional) A way to manage where Gems (libraries) are being installed to eliminate any weird conflicts that may occur again on a per project basis.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Luckily, Postmodern has written a single app for each of these tasks.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;ruby-install&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;chruby&lt;/code&gt; (a.k.a. change-ruby)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;gem_home&lt;/code&gt; (formerly &lt;code&gt;chgems&lt;/code&gt;)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The great thing about this division of concerns is that even if you don’t like how one part of the system works you can always swap it out for another. For instance, if you like &lt;code&gt;chruby&lt;/code&gt;, but want to still install a bleeding edge ruby versions (not supported by design w/ruby-install) and want to use something else like RVM (or MRVM, M for mini), that will just work no questions asked.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h3 id="install-new-versions-of-ruby-with-ruby-install"&gt;Install new versions of ruby with &lt;code&gt;ruby-install&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Ruby-install comes with great package manger support, and of course you could just install it with &lt;code&gt;wget&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt; as well. Their &lt;a href="https://github.com/postmodern/ruby-install"&gt;github page&lt;/a&gt; covers installation pretty well, so I’ll just leave that and say that I used the &lt;code&gt;brew&lt;/code&gt; version without incident:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install ruby-install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To view available rubies to install automatically just run it without arguments&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ruby-install
$ Known ruby versions:
  ruby:
    1:      1.9.3-p545
    1.9:    1.9.3-p545
    1.9.3:  1.9.3-p545
    2.0:    2.0.0-p451
    2.0.0:  2.0.0-p451
    2:      2.1.2
    2.1:    2.1.2
    stable: 2.1.2
  jruby:
    1.7:    1.7.12
    stable: 1.7.12
  rbx:
    2.1:    2.1.1
    2.2:    2.2.6
    stable: 2.2.6
  maglev:
    1.0:    1.0.0
    1.1:    1.1RC1
    stable: 1.0.0
  mruby:
    1.0:    1.0.0
    stable: 1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then install them with varying levels of specificity. For example to install the stable version just run &lt;code&gt;ruby-install rbx&lt;/code&gt; replacing rbx with whatever flavor of ruby you’re interested in. Or if you want the latest major version of 1, just run &lt;code&gt;ruby-install ruby-1&lt;/code&gt;, or &lt;code&gt;ruby-install ruby-2.0&lt;/code&gt; for the latest non 2.1 version. You get the idea, it’s pretty intelligent at figuring out what you want to do.&lt;/p&gt;

&lt;p&gt;Want to install a ruby not listed yet, or no longer supported by default? No problem just pass the MD5 of the latest release or a path to a ruby-lang.org download, &lt;code&gt;ruby-install --md5 MD5_OF_TAR_BZ2 ruby 2.3.4&lt;/code&gt; or &lt;code&gt;$ ruby-install -M https://ftp.ruby-lang.org/pub/ruby ruby 2.0.0-p247&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;You can also change where it installs and who it installs under (e.g. root or you).&lt;/p&gt;

&lt;h3 id="manage-active-version-of-ruby-with-chruby"&gt;Manage active version of ruby with &lt;code&gt;chruby&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;So we’ve installed a bunch of flavors of ruby to play with, but if you run &lt;code&gt;which ruby&lt;/code&gt; in all likelihood something like &lt;code&gt;/usr/bin/ruby&lt;/code&gt; will still show up. So how do we actually use these? We could manage the $PATH ourselves, but that is an annoying, error prone, and is the opposite of automatic.&lt;/p&gt;

&lt;p&gt;That’s where &lt;a href="https://github.com/postmodern/chruby"&gt;chruby&lt;/a&gt; comes in, installation and usage mirrors ruby-install nicely. So we can run &lt;code&gt;chruby&lt;/code&gt; to get a list of rubies to use and marking the current one with an *, and select them in the same way that we did to install them (e.g. &lt;code&gt;chruby rbx&lt;/code&gt;, &lt;code&gt;chruby ruby-1&lt;/code&gt;, etc.). To go back to the system ruby just run &lt;code&gt;chruby stable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To automatically switch on a per-project basis all we need to do is make a file named .ruby-version with the contents of whatever we would pass &lt;code&gt;chruby&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;file: .ruby-version
rbx-2.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="optional-manage-the-gem-path-with-gemhome"&gt;(Optional) Manage the gem path with &lt;code&gt;gem_home&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;While &lt;code&gt;chruby&lt;/code&gt; manages your $GEM_PATH on a per ruby basis, sometimes you want a more sandboxed environment, like when you need to incompatible versions of the same gem for different projects. That’s the purpose &lt;code&gt;gem_home&lt;/code&gt; serves.&lt;/p&gt;

&lt;p&gt;It doesn’t have quite as good of package manager support, but is still easy enough to install, just follow the instructions on &lt;a href="https://github.com/postmodern/gem_home#readme"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The typical use case for me would be to change into the project’s directory and then run:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem_home .
bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install your Gems to $PWD/.gem/ unless they are already installed, in which case it will just use those.&lt;/p&gt;

&lt;p&gt;That’s it! You’re all set to make your ruby apps without giving version management a second thought.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Review: Hacking Politics the TL;DR</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/review-hacking-politics-the-tl-dr/"/>
    <id>http://dropofwill.herokuapp.com/2014/review-hacking-politics-the-tl-dr/</id>
    <published>2014-12-02T15:53:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;A collection of quotes from key players talking about the uprising response to anti-piracy legislation, from COICA to SOPA, from the edge of despair to the blackout.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt; key figures from the political battle over the internet. Primarily on the side of free internet, but occasionally some responses from the other side as well.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; published in 2013, covers events from 2010 to 2013.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;What/Where:&lt;/strong&gt; The first chapter from &lt;a href="http://hfoss-fossrit.rhcloud.com/static/books/hackingpolitics_txtwithcvfb.pdf"&gt;Hacking Politics&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="the-gist"&gt;The Gist&lt;/h3&gt;
&lt;p&gt;A collection of quotes from key players talking about the uprising response to anti-piracy legislation, from COICA to SOPA, from the edge of despair to the blackout.&lt;/p&gt;

&lt;h3 id="the-good"&gt;The Good&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Perfect:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“It’s so easy to accidentally copy something. So easy, in fact, that we found the leading Republican supporter of COICA, Orrin Hatch, had illegally copied a bunch of code into his own Senate website.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aaron Swartz&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;I’d never heard of prior restraint before and really it seems exceedingly clear that SOPA was completely out of bounds with existing case law:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Case law around the First Amendment is clear that you cannot block a much wider variety of speech just because you are trying to stop some specific narrow speech. Because of the respect we have for the First Amendment in the U.S., the law has been pretty clear that anything preventing illegal speech must narrowly target just that kind of speech. Doing otherwise is what’s known as prior restraint.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One of the complaints we’ve heard is that such past prior restraint cases do not apply here since “copyright infringement is illegal.” But, both defamation and child pornography also break the law. The point is that in all of these cases, there are existing laws on the books to deal with that specific content, which can be handled with a scalpel. Adding an additional layer that takes down an entire publication is where it stretches into clear censorship.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mike Masnick&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;The irony that some of the biggest proponents of bills like SOPA, Fox and Universal Studios, only exist because there founders were able to escape the reach of Edison’s east coast lawyers in California. Unfortunately in our global economy there is no California for today’s innovators.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;When movies were invented, Thomas Edison, who held key film-related pat- ents, claimed the right to authorize the production of films, tightly controlling how many movies could be made each year and what subjects these movies could address. The filmmakers of the day hated this, and they flew west to California to escape the long arm of Edison’s legal enforcers in New Jersey. William Fox, Adolphe Zukor, and Carl Laemmle, of Fox Studios, Famous Players, and Universal, respectively, founded the great early studios because they believed that their right to expression trumped Edison’s proprietary rights.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cory Doctorow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="the-bad"&gt;The Bad&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In no way is this a TL;DR. Yeah, it’s a long book, but a TL;DR should always read like a gist: anymore than 3 sentences is to long.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It wasn’t cohesive, parts of it flowed nicely, but taking a lot of disparate quotes, even about the same topic/domain, and combining them into a single narrative takes a lot of effort to do right. And something about this was just a little off.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The whole Richard O’Dwyer situation is terrifying, I thought sites that didn’t host or monitor the content were protected. Apparently not, the fact that they made a college student pay  £20,000 or face imprisonment blows my mind.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="questions"&gt;Questions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;What are they going to throw at us next? Will we be able to stand the next offensive or will people be so worn down that they will just slip a bill right through?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is there a future in “hacking” politics, can we still rely on legal channels to effect the change needed? Or are out of bounds methods needed?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="review"&gt;Review&lt;/h3&gt;

&lt;p&gt;Nothing gets me more riled up then patent and copyright law, and this just brought back a lot of bad memories and a few moments of euphoria. There’s a dark road ahead of us and it’s important to remember where we came from.&lt;/p&gt;

&lt;p&gt;Rating 4/5&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sankey diagram of rule distributions for word sense disambiguation</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/sankey-diagram-of-rule-distributions-for-word-sense-disambiguation/"/>
    <id>http://dropofwill.herokuapp.com/2014/sankey-diagram-of-rule-distributions-for-word-sense-disambiguation/</id>
    <published>2014-11-15T01:14:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;Crazy long title, I know, but it’s not as complicated as it sounds. For my Natural Language Processing class we recently approached the problem of Word Sense Disambiguation from a Machine Learning perspective (we also looked at others, including lookup approaches like Lesk), using the simple, but effective, decision list algorithm. This is my attempt at visualizing the results.&lt;/p&gt;

&lt;p&gt;The WSD task is determining which ambiguous meaning of a word is intended, usually based on the context, e.g. &lt;em&gt;play &lt;/em&gt;bass&lt;em&gt; guitar&lt;/em&gt; versus &lt;em&gt;caught a largemouth &lt;/em&gt;bass.&lt;/p&gt;

&lt;p&gt;In order to accomplish this we look at the words surrounding the text looking for hints like part of speech (which can be derived from a pre-trained tagger) and words, so for example a rule could be &lt;em&gt;+1 word is guitar&lt;/em&gt; or &lt;em&gt;-2 word is a common noun (NN)&lt;/em&gt;, where +/- k is relative to the ambiguous word in question.&lt;/p&gt;

&lt;p&gt;From here we go through the entire training &lt;em&gt;corpus&lt;/em&gt; creating a conditional probability distribution of all possible rules with the appropriate sense marked (using the notation &lt;em&gt;word&lt;/em&gt; and &lt;em&gt;word*&lt;/em&gt; for the two senses). With the distribution of rules we can than easily rank their effectiveness using the &lt;strong&gt;log likelihood formula&lt;/strong&gt; given below:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
  $$
    \left|{\log_2{\frac{Pr(word \mid rule)}{Pr(word* \mid rule)}}}\right|
  $$
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The idea here is that rules that are equally common across the senses don’t give us any real information so they’ll get low likelihoods (e.g. determiners like &lt;em&gt;the&lt;/em&gt;), whereas ones that occur frequently with just one sense get high likelihoods (e.g. specific content words like &lt;em&gt;guitar&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Given this list of rules with their relative ranks we can sort them by log likelihood. This is why we took the absolute value before, because rules weighted towards sense* will be negative and we want to sort by magnitude. Using the algorithm is as simple as running a sample sentence through the list of rules accepting the first one to find a match.&lt;/p&gt;

&lt;pre class="figure"&gt;
      |  *    |         |  *    |
      |  b  b |         |  s  s |
      |  a  a |         |  a  a |
      |  s  s |         |  k  k |
      |  s  s |         |  e  e |
------+-------+   ------+-------+
bass* |&amp;lt;40&amp;gt; 4 |   sake* | &amp;lt;3&amp;gt; 3 |
bass  | 4 &amp;lt;52&amp;gt;|   sake  |   &amp;lt;94&amp;gt;|
------+-------+   ------+-------+
(row = reference, col = response)

Confusion matrices for both cases. The rows are what the answers should have been, columns are what the algorithm chose, so choices along the diagonal are correct.
&lt;/pre&gt;

&lt;p&gt;Usually the results of the algorithm on an untouched test corpus are reported as a confusion matrix or histogram, along with some raw stats like error reduction over baseline or F-scores. While these are useful to understanding the performance of the algorithm, it does little to help you understand why it performs that way. Only the histogram gives you any idea about the data distribution and that’s the only thing it does.&lt;/p&gt;

&lt;p&gt;That’s where my Sankey diagram comes in, traditionally these sort of diagrams are used to show how some distribution changes over time or distance. While in this case time is not particularly meaningful (the algorithm can train/test thousands of examples in a couple of seconds), there is a linear, step-by-step process at work and that’s where a flow diagram can be useful.&lt;/p&gt;

&lt;p&gt;What I decided on for the final version was a three step process: rule distribution per word sense, likelihood distribution per rule (binned to integers), and finally accuracy distribution per likelihood. Here are the two final diagrams:&lt;/p&gt;

&lt;div id="bass" class="chart"&gt;
&lt;/div&gt;

&lt;div id="sake" class="chart"&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; you can hover over the links to see the exact numbers and you can drag the nodes around to get a better view of the various connections&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;The most obvious observation from this visualization is just how many low likelihoods there are in both cases (incidentally this is because the likelihoods of rules with just 1 example end up 3 for the bass case and 4 for the sake case), but also how few times they actually get applied.&lt;/p&gt;

&lt;p&gt;One major assumption in this algorithm is that higher likelihood will have better results, how good is this assumption? We can’t tell that from the confusion matrix, but with the Sankey diagram every incorrect answer can be traced back to the rule’s likelihood that made a mistake. Here we can see that no rule with a likelihood greater than 5 ever makes a mistake in both cases, which shows that the assumption is not only pretty good, but also consistent across use cases.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Reign-Gold tree as a first attempt" style="width: 66%; float: right" src="images/first-attempt-8866e9c4.svg" /&gt;&lt;/p&gt;

&lt;p&gt;Another takeaway is how few rules we have for the sake* case and also how low in the decision list those that exist are. This shows an non-obvious limitation of the algorithm, it needs similar distributions of data. Even though this algorithm performed “better” in overall accuracy then the bass case, it still only got 50% of the sake as in wine cases correct.&lt;/p&gt;

&lt;p&gt;My first attempt (incomplete version shown to the &lt;em&gt;right&lt;/em&gt;) was the straight forward Reign-Gold tree diagram with labelled nodes. This admittedly shows the exact numbers immediately (without hover over), but it loses the high level visual cues of size and is not interpreted necessarily as a temporal flow like the Sankey approach.&lt;/p&gt;

&lt;style&gt;

.figure {
  width: 33%;
  min-width: 200px;
  margin: 20px;
  float: right;
  padding: 1em !important;
  white-space: pre-wrap;
  white-space: -moz-pre-wrap;
  white-space: -pre-wrap;
  white-space: -o-pre-wrap;
  word-wrap: break-word;
}

text {
  font-size: 11px;
  pointer-events: none;
}

.group path {
  stroke: #000;
}

path.chord {
  stroke-width: 0;
  fill-opacity: 1;
}

.chart {
  margin: 5em 0;
}

.node rect {
  cursor: move;
  fill-opacity: 1;
  shape-rendering: crispEdges;
  stroke-opacity: 0;
}

.node text {
  pointer-events: none;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 0 1px #fff;
  font-size: 14px;
  font-family: "Merriweather", sans-serif;
}

.link {
  stroke-opacity: 0.4;
  fill-opacity: 0;
}

.link:hover {
  stroke-opacity: 1;
  fill-opacity: 0;
}

&lt;/style&gt;

&lt;script src="http://d3js.org/d3.v3.min.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="http://d3js.org/colorbrewer.v1.min.js"&gt;&lt;/script&gt;

&lt;!--The D3 plugin for Sankey diagrams--&gt;
&lt;script src="javascripts/sankey-f1b10ec2.js" type="text/javascript"&gt;&lt;/script&gt;

&lt;script src="javascripts/sankey_has_many-a8fb724f.js" type="text/javascript"&gt;&lt;/script&gt;

&lt;!-- Render nice latex formulas --&gt;
&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt; &lt;/script&gt;

&lt;script type="text/javascript"&gt;
    var sankeyBass = SankeyHasMany(),
        sankeySake = SankeyHasMany(),
        width = 960,
        height = 650,
        halfWidth = width / 2;

    sankeyBass
      .width(width)
      .height(height)
      ;

    sankeySake
      .width(width)
      .height(height)
      ;

    d3.json("../../../../javascripts/bass.json", function(data1) {
      var svg = d3.select("#bass").append("svg");
      svg.datum(data1).call(sankeyBass);

      svg.append("text")
        .attr({ "x": 0, "y": 10,
                "dx": 0, "dy": 0})
        .text("Rule Distributions per Sense");

      svg.append("text")
        .attr({ "x": halfWidth, "y": 10,
                "dx": 0, "dy": 0,
                "text-anchor": "middle" })
        .text("Log Likelihood");

      svg.append("text")
        .attr({ "x": width - 10, "y": 10,
                "dx": 0, "dy": 0,
                "text-anchor": "end" })
        .text("Accuracy per Test Case");
    });

    d3.json("../../../../javascripts/sake.json", function(data1) {
      var svg = d3.select("#sake").append("svg");
      svg.datum(data1).call(sankeySake);

      svg.append("text")
        .attr({ "x": 0, "y": 10,
                "dx": 0, "dy": 0})
        .text("Rule Distributions per Sense");

      svg.append("text")
        .attr({ "x": halfWidth, "y": 10,
                "dx": 0, "dy": 0,
                "text-anchor": "middle" })
        .text("Log Likelihood");

      svg.append("text")
        .attr({ "x": width - 10, "y": 10,
                "dx": 0, "dy": 0,
                "text-anchor": "end" })
        .text("Accuracy per Test Case");
    });
&lt;/script&gt;

</content>
  </entry>
  <entry>
    <title>My Vim Config Part 2: Shortcut Keys</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/my-vim-config-part-2-shortcut-keys/"/>
    <id>http://dropofwill.herokuapp.com/2014/my-vim-config-part-2-shortcut-keys/</id>
    <published>2014-11-14T23:53:00-05:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;This is a continuation of my short series (&lt;a href="/2014/11/02/my-vim-config-part-1-the-basics/"&gt;part 1&lt;/a&gt;) on how I setup Vim to be a little more fully featured looking at the custom shortcuts. By no means is my setup the best, but there are a few neat things I’ve stumbled upon and my thought is that by aggregating them here someone else might find something new to add. Or maybe someone knows a better way to do something and lets me know. So let’s get started!&lt;/p&gt;

&lt;p&gt;First you’ll want to start by remapping the leader key to something you’re comfortable with. In case you are not familiar, the leader key is the key that you press and release before (‘leads’) you send a custom key command to Vim. Personally I don’t have any custom commands that make sense in insert mode, so I remap it to space. By default it is /, pick your poison and let’s get started.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;map &amp;lt;Space&amp;gt; &amp;lt;Leader&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Vim one of the keys to moving around efficiently, besides just avoiding the arrow keys, is using regex search to your advantage. There are four different types of regex in Vim that you can set by leading your regex with an escaped flag. These represent different levels of ‘magic’, which sounds scary, but really just controls what symbols need to be escaped when you’re writing them (check out :help magic for a detailed overview). In general I prefer the very magic mode (\v), which let’s you write a regex in a mostly Perl compatible way, which is probably what you’re familiar with. To use that by default I just remap &lt;code&gt;/&lt;/code&gt; to &lt;code&gt;/\v&lt;/code&gt;. That way if I actually want one of the other modes I can always just backspace two characters and we’re back to magic mode.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" default regex to very magic
nnoremap / /\v
vnoremap / /\v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After searching Vim will highlight results, which are great while you’re looking for them, but are distracting if your done searching. To clear this we can run &lt;code&gt;:noh&lt;/code&gt;. Since I do this so often I remap it to double tap space.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;&amp;lt;space&amp;gt; :noh&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you ever turn on word wrapping you might have noticed that the j/k movements don’t work with visual lines, but code lines. That’s not usually what I want (consistency of visual units is more important to me personally), so I remap them to their display line counterparts gj/gk:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Move screen lines not actual ones
nnoremap j gj
nnoremap k gk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use bracket jumping a lot (e.g. moving between matching (), {}, etc.), by default this uses the %, but that’s an awkward two key press, so I remap it to the tab key.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Jump around brackets with tab as well
nnoremap &amp;lt;tab&amp;gt; %
vnoremap &amp;lt;tab&amp;gt; %
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Buffer movement by default is a little bit awkward at first, though it gets better with familiarity. Often you just want to jump around linearly between files, so I made shortcuts for previous and next buffer (bp and bn) that line up with &amp;lt; &amp;gt; keys so that makes a bit of visual sense.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Leader , or . (think &amp;lt; &amp;gt;) for previous/next buffer
map &amp;lt;leader&amp;gt;, :bp&amp;lt;CR&amp;gt;
map &amp;lt;leader&amp;gt;. :bn&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Getting out of insert mode early and often is a key to being productive in Vim, because of that there are a lot of ways to send the escape signal (&lt;esc&gt;, &lt;ctrl-c&gt;, and &amp;lt;ctrl-[&amp;gt;), but in case any of those aren't fast enough for you, you can always remap it to some obscure combo of home rule keys. I like the kj combo, but others use jj or jk as well.&lt;/ctrl-c&gt;&lt;/esc&gt;&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;inoremap kj &amp;lt;Esc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you use Vim windows (think window &lt;em&gt;splits&lt;/em&gt;) frequently, then I think it makes sense to remap creation and movement between them to something less verbose. I use leader w for vertical splits and leader e for horizontal ones. I also in the same command move the cursor there because rarely do I create a split and then do nothing with it. Movement while intuitive, takes one to many key presses for my taste, so I get rid of the &lt;code&gt;w&lt;/code&gt; and just move with &amp;lt;ctrl-h,j,kl&amp;gt;.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Jump to new split with &amp;lt;space&amp;gt;w
nnoremap &amp;lt;leader&amp;gt;w &amp;lt;C-w&amp;gt;v&amp;lt;C-w&amp;gt;l
nnoremap &amp;lt;leader&amp;gt;e &amp;lt;C-w&amp;gt;s&amp;lt;C-w&amp;gt;j

" Move around splits with ctrl movement keys
nnoremap &amp;lt;C-h&amp;gt; &amp;lt;C-w&amp;gt;h
nnoremap &amp;lt;C-j&amp;gt; &amp;lt;C-w&amp;gt;j
nnoremap &amp;lt;C-k&amp;gt; &amp;lt;C-w&amp;gt;k
nnoremap &amp;lt;C-l&amp;gt; &amp;lt;C-w&amp;gt;l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Closing a buffer without closing a split is a lot harder than you would expect. The following command does some previous/next buffer magic to make it work. One limitation of this approach is that you need a few buffers to make it work, but since that’s usually when you would want it, that’s not too big of a deal.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;map &amp;lt;leader&amp;gt;v :bp&amp;lt;bar&amp;gt;sp&amp;lt;bar&amp;gt;bn&amp;lt;bar&amp;gt;bd&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the last four I remap my arrow keys, which you may or may not be ready to give up yet. The first two are my left and right arrow keys to bring up the previous regex search or command mode run. These only save one key stroke, but are something I do often enough that I think its worthwhile, YMMV.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Open last Vim command
nnoremap &amp;lt;Right&amp;gt; :&amp;lt;Up&amp;gt;
" Open last search result
nnoremap &amp;lt;Left&amp;gt; /\v&amp;lt;Up&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next one is pretty cool, it moves the current line or selection up or down a single line based on the arrow key you use.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Bubble single lines
nnoremap &amp;lt;Up&amp;gt; ddkP
nnoremap &amp;lt;Down&amp;gt; ddp

" Bubble multiple lines
vnoremap &amp;lt;Up&amp;gt; xkP`[V`]
vnoremap &amp;lt;Down&amp;gt; xp`[V`]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s it for now.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>My Vim Config Part 1: The Basics</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/my-vim-config-part-1-the-basics/"/>
    <id>http://dropofwill.herokuapp.com/2014/my-vim-config-part-1-the-basics/</id>
    <published>2014-11-01T23:23:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;As someone that came to Vim from Sublime Text (through the excellent Vi-ntage mode), one thing that held me back was just how annoying the default Vim settings are. In a way looking back at it that wasn’t a bad thing, it let me really craft my own configuration that I’m pretty happy with, but always looking for ways to improve. In order to help someone else a who is headed down that path find a config that works for them a little quicker.&lt;/p&gt;

&lt;p&gt;To start off I just want to look at the basic stuff, how do we get rid of all that annoying old Vi stuff and get some useful defaults?&lt;/p&gt;

&lt;p&gt;First, the most important thing to do is turn off Vi-compatibility, unless you plan on using this config on really old computers you shouldn’t have any need for this compatibility.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Use Vim settings that are not compatible with legacy Vi
set nocompatible
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default backspace in Vim’s insert mode behaves a little weirdly. It works as you expect on a single line, but doesn’t allow you to delete over new lines, automatically indented text, or beyond the point where you entered insert mode. You can change that by adding that to the backspace setting. I also like to set utf-8 to handle odd characters without trouble (I use √ all the time in todo lists for example).&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Backspace anything in insert mode
set backspace=indent,eol,start

" Set the text encoding to handle utf-8
set encoding=utf-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we want to make things start to look a little better (more on that in a later post). Most of this is pretty self explanatory. One cool thing is relativenumber/number this sets it so the current line give you the actual line number with all the other lines relative to that. This makes it so it’s easy to run commands like 10j or 5dd without having to count the lines.&lt;/p&gt;

&lt;p&gt;Scroll off makes sure the current line always has n lines above or below visible. Some people like to set this to 4000 or some other high number to always keep the cursor in the center of the screen, personally I like to just leave it at 4 or 5.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;syntax on           " Syntax highlighting
set relativenumber	" Line numbers relative to cursor
set number          " But ignore the current line
set numberwidth=4   " How wide the line number column should be by default
set showcmd         " Show incomplete commands
set noerrorbells    " No dinging!
set scrolloff=4     " Pad lines vertically by 4
set hidden          " Hide buffers instead of yelling at me about it
set ruler           " Tells you the coords of the cursor in the status line
set wildmenu        " Tab complete vim commands
set wildmode=longest,list,full
set laststatus=2    " Always show status line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tabs are something that everyone complains about with Vim and they are a little bit confusing at first. Basically the width of what your tab key creates and what the shift keys (&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&lt;/code&gt;) create are two separate settings, even though you would very rarely actually want them different. Here I’m just showing how I like to indent my code in a perfect world (2 spaces, autoindented nicely), later when we talk about plugins I’ll show you how to do this on a per file-type basis.&lt;/p&gt;

&lt;p&gt;Breakindent is a bleeding edge feature added to Vim 7.4, which makes words wrap such that they respect the indent level. This makes word wrap with long-lined and heavily indented code (cough html cough) actually alright to look at.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Nice, compact default tab settings
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent
" set nowrap
set breakindent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you still want to be able to use the mouse and your terminal allows it, you can enable it with this function. I used to, but I find it gets more in the way than I actually use it, but it’s nice to know how to enable it if you want it sometime.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" In many terminal emulators the mouse works just fine, so you can enable it.
if has('mouse')
  set mouse=a
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing you’ll notice when working with Vim is all these dotfiles it litters all over your working directory. These are how maintains undo state across sessions as one example. A lot of people just disable this because they don’t like the clutter and use version control (which everyone should of course). But instead of just getting rid of it I like to throw it in a tmp directory somewhere so if some catastrophic does happen I have a backup plan.&lt;/p&gt;

&lt;p&gt;Also copy and paste isn’t great out of the box, setting copyindent makes things a lot more bearable.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" File management
set undolevels=1000
set backupdir=~/.vim/tmp
set directory=~/.vim/tmp
set undodir=~/.vim/tmp
set noswapfile

" Copy/Paste settings
set copyindent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally some more personal choices that I’ve found useful. Colorcolumn just draws a vertical sstripe at 80 characters wide to show when my code is getting to wide. Incsearch and hlsearch make regex-ing a nicer visual experience. Set spell is awesome, it highlights your mistakes, and gives you a list of suggestions when you run &lt;code&gt;za=&lt;/code&gt;. Run &lt;code&gt;:help spell&lt;/code&gt; for more details.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set incsearch   " Show matches as you type
set hlsearch    " Highlight all search matches not just the current one
set showmatch   " Visually flash matching brackets when typing
set spell       " Spell checker for Vim!
set colorcolumn=80 " Let me know when my lines are too damn long
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it for now, next time we’ll talk about the adventure that is key remapping.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Simple Made Easy</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/simple-made-easy/"/>
    <id>http://dropofwill.herokuapp.com/2014/simple-made-easy/</id>
    <published>2014-10-30T16:16:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;A talk by Rick Hickey, the author of the JVM-based functional programming language Clojure, about the value of writing simpler, non-complected code. The talk was given to a functional programming audience, so some of the material (and the jokes) may go over OO programmer’s heads at times. Along the way he critiques object oriented approaches, test driven development, programmer centric coding, and breathes new life into common and archaic words by carefully defining their meanings.&lt;/p&gt;

&lt;h2 id="good"&gt;Good&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;He offers a good reminder that most of us ship artifacts not constructs. How something was made (the constructs) matters very little to your end users (unless your end users are other programmers), all they care about is what they can see (the artifacts of the constructs). It’s important to not lose sight of that as the process unfolds.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;What’s true about every bug that made it into production code?&lt;/em&gt; It passed all the tests and made it through the type checker. Just because you have these things in your toolkit or language doesn’t mean you’re using them well or that they can ever be fool proof.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;His explanation of using a modular/functional approach even when your language does not necessarily make that easy. The what, who, how, when &amp;amp; where, and why slides really helped me as someone from an OOP background start to grok what he was saying. That said, I wish he would have spent a bit more time here, perhaps with some more concrete examples (but maybe that’s a whole other talk…).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="bad"&gt;Bad&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The whole Test Driven Development as guard rails analogy. Yeah, it made for a good laugh, but it also shows Hickey has totally missed the point behind TDD. Later on in the talk he makes an argument against agile sprints, saying that before diving into code, one should first think through the problem and make design decisions. You know what that sounds an awful lot like? Writing tests before code. He seems to think that TDD is the idea that mindless tests in and of themselves will solve all our problems. When in reality tests are just about formalizing and writing down the very thought process he advocates for in this talk! You write tests so you don’t forget all that reasoning and designing you did three or four months down the road.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The idea that following standards or conventions or having nice systems to work with is a bad thing because they make programmers replaceable. I know that was just one of a few arguments he was making there, but it really bothers me that he even brought it up. If all we care about is job security than why don’t we just write wrappers in domain specific languages around Assembly, they’ll never be able to fire us then! I just find it ironic how the whole talk he goes on and on about being able to swap pieces in and out of a system and then somehow thinks this is suddenly a bad thing when it comes to programmers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At around 29 minutes he talks about how programmers are all looking for benefits and never weigh the cost of using a given library or tool and he uses Hacker News as an example of this. However, I think he’s got it completely backwards people on places like Hacker News and /r/programming are some of the most critical places I’ve ever been on the internet. Yeah, there’s the occasional bloke with a positive comment, but most of the people on there are like, “Why would I do that when I can just write that for myself in x86 assembly?” Programmers are way more critical than he thinks, it’s the pressure from management that forces us to churn out code quickly that leads to the behaviour he describes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If I wanted to start writing code from a functional perspective, where would be the best place to start? From one of my own languages like Ruby or JavaScript, or a functional-specific approach? What books or sites are a good place to get started with that?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I want more details about how state differs from values, preferably some examples. What does it mean to compose values with time? I don’t know a whole lot about the functional paradigm, but that sounds a whole lot like what state is to me…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What the hell are monads and why are they funny?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="review"&gt;Review&lt;/h2&gt;

&lt;p&gt;There is a lot I disagree with from this talk and I thought a lot of concepts from the TDD community that Hickey either does not understand or deliberately straw manned (occasionally to comedic effect). That said while the talk was salty at times, I think a great deal of it was insightful, and better still, these insightful bits no one else is saying. I think this talk is important for every developer to think about as a way of self-critique. You may not agree with or comprehend everything he says, but I think there are enough nuggets in there to be useful for just about anyone.&lt;/p&gt;

&lt;p&gt;I begrudgingly give it 5 out of 5 arbitrary units.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>RiP: A Remix Manifesto</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/rip-a-remix-manifesto/"/>
    <id>http://dropofwill.herokuapp.com/2014/rip-a-remix-manifesto/</id>
    <published>2014-10-21T23:41:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Pop music and our music from different genres seems untouchable, Elton John seems untouchable, you know? Obviously, they create that, they force that that idea into your mind, that the superstars are untouchable. So just being able to manipulate it and do what ever you want, put Elton John in a headlock. Just put a beat behind him, and pour a beer on his head. - Girl Talk&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s the first of many insightful, inflammatory, memorable quotes from this open source documentary. This one comes on in the first 5 minutes and really sets the tone of the entire film, but before we dive into that a little background:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt; Directed by &lt;a target="_blank" href="http://en.wikipedia.org/wiki/Brett_Gaylor"&gt;Brett Gaylor&lt;/a&gt;, a Canadian filmmmaker. Starring many important people in the IP battle, including remix artist Girl Talk, lawyer Lawerence Lessig, author Cory Doctorow, and Brazilian musician Gilberto Gill.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;What/Where:&lt;/strong&gt; &lt;a target="_blank" href="http://vimeo.com/8040182"&gt;RiP: A Remix Manifesto&lt;/a&gt;, a documentary film about the remix movement specifically and the copyright/left issue generally.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; Published: November 2008&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="the-gist"&gt;The Gist&lt;/h2&gt;

&lt;p&gt;The best gist is going to be the manifesto that the name of the film comes from itself, so let’s start with that (emphasis mine):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Culture&lt;/strong&gt; always builds on the &lt;strong&gt;past&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;past&lt;/strong&gt; always tries to control the &lt;strong&gt;future&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Our &lt;strong&gt;future&lt;/strong&gt; is becoming less &lt;strong&gt;free&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To build &lt;strong&gt;free&lt;/strong&gt; societies &lt;strong&gt;you must &lt;em&gt;limit&lt;/em&gt; the &lt;em&gt;control&lt;/em&gt; of the &lt;em&gt;past&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you might be able to tell from the manifesto the film isn’t just about remixing music, its about the bigger issue of misuse of copyright and what this means for a free society. It accomplishes this by presenting examples that are clearly misuses of copyright (at least from the filmmaker’s perspective), across many domains from Girl Talk’s remix music to biomedical research. The documentary goes through the examples by following the manifesto as a sort of outline, with Girl Talk being the common thread throughout.&lt;/p&gt;

&lt;h3 id="the-good"&gt;The Good&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It’s well worth the watch just for the awesome inflammatory quotes peppered throughout. Examples like Doctorow’s Urinary Tract Business Model at 49 minutes or his masturbation analogy at 24 minutes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I think the strongest argument in the film came from Gilberto Gill when he said:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sharing is the nature of creation, it doesn’t happen in isolation. No one creates in a vacuumi, everything comes from something else. It’s a chain reaction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s impossible to not build on the works of others and the film showed how this has already been happening for centuries in the music industry already. From Led Zeppelin to Muddy Waters, everyone has influences and there is nothing wrong with that.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;But my favorite moment of the entire documentary was an excerpt from a speech Mark Hosler of Negativeland gave:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Corporations are completely taking over our culture and telling us that we can only consume it. And we’re saying no. We’re saying we want to create with it, respond to it, take it, mutulate, cut it up. We’re saying you don’t ask us whether I want to see billboards everywhere I go in my town, you don’t ask me if I want to see your Nike logo everywhere I go, you don’t ask me if I want to hear U2’s music everywhere I go shopping or eat at a restraunt. So why should I have to ask you to take a little bit of it and make something out of it. To make fun of you critique you. Why do I need to ask?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="the-bad"&gt;The Bad&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It’s shows its age at times, it would be nice to see an updated version.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While I agree with everything its saying, I think it would be useful to show the other side’s argument a little more, he tried to do that with the copyright lady (“You can’t argue creativity when you’re dealing with other people’s stuff.” 13 minutes), but I don’t think it’s enough. Even still from a persuasive perspective I think it’s better to show just how ridiculous the other side’s arguments actually are. For the most part in the film it only presented these arguments from people who were already opposed to them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="questions"&gt;Questions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Why hasn’t Girl Talk been sued or arrested yet? Do the distributors not care anymore? Obviously they still do because &lt;a href="http://www.idolator.com/229216/dj-drama-gets-raided-by-the-feds"&gt;DJ Drama got arrested and his house raided&lt;/a&gt; for his remixes. Do they think they won’t win? Or do they think it would be a hollow victory with a huge PR hit (arresting the squeeky clean white, middle class, biomedical engineer)?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This documentary at times comes off as very anti-copyright, which is the foundation for a number of open source licensing techniques. If we were able to rewrite copyright law today what would be the best approach? The original 14 years? None at all? Should we as a community rely on something as historically dark as our basis?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What can we do to continue pushing this issue forward? Culture jamming and remixing are awesome examples, but they can’t stand alone. What other sorts of IP-less business models can we create?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="review"&gt;Review&lt;/h3&gt;

&lt;p&gt;I think that while this documentary shows it’s age in places (some things have gotten better and others worse), it is still insightful and should serve to get anyone interested in freedom of information riled up.&lt;/p&gt;

&lt;p&gt;In the words of Harvard Law Professor, Lawrence Lessig, when describing the state of our copyright regulations:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;That’s, what’s the word? That’s fucked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What are we going to do about it? I think that’s the big takeaway from this documentary, is that some things have actually improved (they stopped going after individuals that download music and focused on the distributors, e.g. pirate bay or Dotcom), but that’s only the beginning. We still have a lot of work ahead of us to complete part four of the manifesto.&lt;/p&gt;

&lt;p&gt;Rating 4.5/5&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Word Sense Disambiguation with Python</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/word-sense-disambiguation-with-python/"/>
    <id>http://dropofwill.herokuapp.com/2014/word-sense-disambiguation-with-python/</id>
    <published>2014-10-12T21:48:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;One of the first things you realize when working with any sort of linguistic data is just how ambiguous just about anything we say or write really is. From the smallest units of sound (what was that garbled bit of sound?) to the document unit of meaning (what was that article about?), there aren’t many parts of language that we can be 100% sure of even as native speakers, much less as an outside observer, like our programs.&lt;/p&gt;

&lt;p&gt;Nevertheless, we have solved a number of very difficult problems to a reasonable degree of accuracy with computational approaches. Today I’m going to talk about one of the more naive approaches to word sense disambiguation, which actually does fairly well when given a reasonably large input.&lt;/p&gt;

&lt;p&gt;But first, what’s this Word Sense Disambiguation all about. Well, a words sense can is a way of identifying how we use a given word by associating it with a &lt;em&gt;gloss&lt;/em&gt;, which you can think of as it’s definition. For example the sense in which I’m using the word sense according to WordNet (a corpus that keeps track of all this) is &lt;strong&gt;sense.n.02&lt;/strong&gt;. That means the root word is sense, it’s being used as a noun, and it is the second most common usage of the word. The gloss associated with this sense is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the meaning of a word or expression; the way in which a word or expression or situation can be interpreted&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other root words and part of speech are possible, for example another senses of this word is &lt;strong&gt;common_sense.n.01&lt;/strong&gt; or &lt;strong&gt;smell.v.05&lt;/strong&gt;. This is where the ambiguity problem comes in how does a computer know how to treat a given input when each one has a number of different senses, some of which have wildly different connotations and usages? This one problem is a key building block for all sorts of more complex, interesting NLP systems, from sentiment analysis to machine translation.&lt;/p&gt;

&lt;p&gt;One simple approach to this problem is to use a tool like WordNet to lookup the various senses and compare their glosses and examples to the context that the word was found in. This technique is called the Simplified Lesk algorithm (simplified because he started out with a more complex probabilistic approach, but found that on smaller datasets this naive approach actually performs better!).&lt;/p&gt;

&lt;p&gt;First things first import the magic that is going to help us on our task:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import nltk
from nltk.corpus import wordnet as wn
from nltk.corpus import stopwords
from nltk.tokenize import RegexpTokenizer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next the main function, we’ll save our results as we go in a dict called res/results. This outlines the 3 major steps in the algorithm:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Normalize the word into its root form&lt;/li&gt;
  &lt;li&gt;Query WordNet or some other resource to get the set of possible senses&lt;/li&gt;
  &lt;li&gt;Loop over these sense computing the overlap between their glosses and examples and our context.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def get_results(word, context):
    res = dict()
    res["word"] = word
    res["base"] = base_form_of(word)
    res["synsets"] = synsets_of(res["base"])
    res["best_sense"] = simple_lesk(res, context)
    print(res["best_sense"])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get the normalized form we use NLTK’s excellent built in tool, Morphy, which uses a sequence of rules to transform (or transduce) it to a root word. Next we use that base form to query WordNet for all possible senses.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def base_form_of(word):
    return wn.morphy(word)

def synsets_of(word):
    return wn.synsets(word)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now onto the fun part: the Simplified Lesk. First we initialize the tokenizer we imported earlier with a regular expression that basically says to break up a given string into an array of consecutive (&lt;code&gt;+&lt;/code&gt;) alphabetic characters (&lt;code&gt;\w&lt;/code&gt;).&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def simple_lesk(results, context):
    """
    Input: A previously computed results dict and a context list/set
    Returns: The sense from WordNet with the most overlap with the context,
             if there are none it defaults to the most common sense
    """
    tokenizer = RegexpTokenizer(r'\w+')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we initalize the best_sense variable to equal the first WordNet sense, that way if we don’t get any hits we can default back to the most common sense. Same with overlap, we haven’t compared anything yet so how would we know how much any given context overlaps?&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    best_sense = results["synsets"][0]
    max_overlap = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stopwords are usually function words (is, the, me, etc.) that hold a great deal of syntactic meaning, but aren’t that helpful in semantic analysis. NLTK comes with a default set for English that has pretty good coverage, we then extend the list to include the words we’re dealing with since that might influence the results unintentionally.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    stop_words = stopwords.words("english")
    stop_words.extend([results["base"], results["word"]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we use the tokenizer and the list of stop words to generate a set of content tokens from the context using the python concept of list comprehensions.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    context = set(w.lower() for w in tokenizer.tokenize(context) \
                    if w.lower() not in stop_words)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we loop over sense, grab its definition and any examples and tokenize that in the same way as with the context. We then compute the overlap between the two sets and keep track of which tallies up the most overlap as we go. Once it’s all done we return the sense with the most results.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    for sense in results["synsets"]:
        signature = set()
        text = [ex for ex in sense.examples]
        text.append(sense.definition)

        signature = set(w.lower() for w in tokenizer.tokenize(" ".join(text)) \
                            if w.lower() not in stop_words)

        overlap = compute_overlap(signature, context)

        if overlap &amp;gt; max_overlap:
            max_overlap = overlap
            best_sense = sense

    return best_sense
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what about the compute_overlap bit, I hear you saying. Well that’s simple, since we’re dealing with sets that’s as simple as taking the length (len()) of the &lt;em&gt;intersection&lt;/em&gt; (&amp;amp;) between them.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def compute_overlap(signature, context):
    """
    Input: Two sets of types
    Returns: Length of the intersection of the two sets
    """
    return len(signature &amp;amp; context)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s it, while this might seem way to simple it actually works fairly well because there usually aren’t a lot of senses and the distribution is heavily weighted towards the top (so our default state is right a large percentage of the time). If you want to see a complete working example (that also computes some other features like word similarity) check out the &lt;a href="https://github.com/dropofwill/word-sense-disambiguation/blob/master/ps2_4_wordnetinfo.py"&gt;full script&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Creating and Deploying a Middleman Blog, Part 3: Deployment</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/creating-and-deploying-a-middleman-blog-part-3-deployment/"/>
    <id>http://dropofwill.herokuapp.com/2014/creating-and-deploying-a-middleman-blog-part-3-deployment/</id>
    <published>2014-09-28T22:04:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="/2014/09/14/creating-and-deploying-a-middleman-blog-part-1-what-s-middleman/"&gt;Two posts ago&lt;/a&gt; I talked about static site generators in general and Middleman specifically. &lt;a href="/2014/09/22/creating-and-deploying-a-middleman-blog-part-2-blogging-with-middleman/"&gt;After that&lt;/a&gt; I talked about how to use Middleman for blogging and again talked about different use cases. Today I am going to talk about deployment options and how you can get your site onto the web.&lt;/p&gt;

&lt;h3 id="the-options"&gt;The Options&lt;/h3&gt;
&lt;p&gt;The beautiful thing about static site generators is the portability, you can just throw it on any server that’s public facing and can serve files and it just works. That said there are certain practices that can make your life easier, and deploy your sites safely with versioning and without ever having to touch an FTP client. I’m going to talk about one of many of these possible configurations, &lt;a target="_blank" href="http://heroku.com/"&gt;Heroku&lt;/a&gt; with &lt;a target="_blank" href="http://puma.io/"&gt;Puma&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="heroku-with-puma-what-this-site-is-currently-running-on"&gt;Heroku with Puma (What this site is currently running on)&lt;/h3&gt;
&lt;p&gt;Puma is a Ruby web server built specifically for Rack applications, with the intent on being fast and efficient. In some of the &lt;a href="http://puma.io/"&gt;latest benchmarks&lt;/a&gt; it used 10% of memory that Unicorn did while still beating it by more than a third in terms of requests per seconds. This improvement comes at the cost of portability, as it only works on Ruby Rack applications, but when that’s what you have (which we can easily turn Middleman into) it makes a great choice. Especially when your using a SAAS like Heroku, who makes their money by charging for &lt;a href="https://devcenter.heroku.com/articles/dynos"&gt;“Dynos”&lt;/a&gt; (you can think of it as a CPU container).&lt;/p&gt;

&lt;p&gt;So what are the steps?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add rack-contrib and puma to the &lt;code&gt;Gemfile&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;(Optional) configure a 404 page and pretty urls&lt;/li&gt;
  &lt;li&gt;Add the Rack config: &lt;code&gt;config.ru&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add the Procfile so Heroku knows what’s up&lt;/li&gt;
  &lt;li&gt;Install Heroku command line tools&lt;/li&gt;
  &lt;li&gt;Push to Heroku!&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="add-rack-contrib-and-puma-to-the-gemfile"&gt;1. Add rack-contrib and puma to the &lt;code&gt;Gemfile&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Heroku will install all the gems in our Gemfile on push (at least those not in any non-production groups), a lot of these are going to be unnecessary, but that won’t hurt anything. That said we are going to need some way to serve our files and the easiest way to install stuff on Heroku will be in our Gemfile.&lt;/p&gt;

&lt;p&gt;So simply add Rack and Puma to the &lt;code&gt;Gemfile&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem "rack-contrib"
gem "puma"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could be safe by specifying a version, but I don’t foresee that being that big of a problem with these particular gems.&lt;/p&gt;

&lt;h4 id="optional-configure-a-404-page-and-pretty-urls"&gt;2. (Optional) configure a 404 page and pretty urls&lt;/h4&gt;
&lt;p&gt;This really doesn’t have anything much to do with deployment, but will make some of the settings in the next step make more sense. Basically just create a page somewhere to be the 404 (I put mine in &lt;code&gt;source/404.html&lt;/code&gt;) and turn on pretty urls in config.rb:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;activate :directory_indexes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This basically just turns all the urls into the form: &lt;code&gt;path/to/page/&lt;/code&gt; instead of: &lt;code&gt;path/to/page.html&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id="add-the-rack-config-configru"&gt;3. Add the Rack config: &lt;code&gt;config.ru&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This is the main guts of the post and may be a bit hard to read if you aren’t familiar with Ruby or Rack applications. All try to comment what’s going on clearly, but the main thing to look out for are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Symbols: &lt;code&gt;:symbol&lt;/code&gt; are basically just more efficient strings. Often used as configuration flags, keys in hashes, and internally they are used to reference instance methods.&lt;/li&gt;
  &lt;li&gt;Method calls don’t have to have parentheses around the parameters and a lot of ruby programmers leave them out unless they are absolutely necessary (makes code read more like English).&lt;/li&gt;
  &lt;li&gt;Key Pairs are separated by the ‘hash rocket’: &lt;code&gt;key =&amp;gt; value&lt;/code&gt; or alternately if you’re using symbols as the keys the compressed syntax: &lt;code&gt;key: value&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The double colon &lt;code&gt;::&lt;/code&gt; is basically a namespace resolution operator, it’s how you access items in nested modules.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ok, so here’s the code:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# load the necessary libraries
require "rubygems"
require "rack"
require "middleman/rack"
require "rack/contrib/try_static"

# Build the static site when the app boots
# The ticks ` ` tell ruby to execute the commands
`bundle exec middleman build`

# Use is a Rack method
# Rack::Head, ::TryStatic are modules that we are using
# Enable proper HEAD responses
use Rack::Head
# Attempt to serve static HTML files
use Rack::TryStatic,
    # We want to serve the compiled site, in build
    root: "build",
    # %w is a shortcut to create arrays of strings
    # Probably unnecessary, but thinking ahead in case we
    # want to add more later
    urls: %w[/],
    # Try these other extensions if the above fails
    try: ['.html', 'index.html', '/index.html']

# Serve a 404 page if all else fails
run lambda { |env|
  [ 404, {"Content-Type"  =&amp;gt; "text/html",
          "Cache-Control" =&amp;gt; "public, max-age=60" },
    # Change this to wherever you put your 404 page
    File.open("build/404.html", File::RDONLY) ] }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="add-the-procfile-so-heroku-knows-whats-up"&gt;4. Add the Procfile so Heroku knows what’s up&lt;/h4&gt;
&lt;p&gt;Heroku still doesn’t quite know what to do with all this, until we clearly define our app’s processes. This is done in a Procfile like so:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: bundle exec puma -p $PORT -e $RACK_ENV
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically just defines a web process that runs Puma on a port and rack setup in the environment variables (bundle exec just means execute this command in the ‘context’ of the bundle, which may or may not be necessary if you run it locally, depends on how you manage your Ruby installs).&lt;/p&gt;

&lt;h4 id="install-heroku-command-line-tools"&gt;5. Install Heroku command line tools&lt;/h4&gt;
&lt;p&gt;Now to push to Heroku you’re going to need an account and the command line tools. You can find detailed instructions &lt;a target="_blank" href="https://toolbelt.heroku.com/"&gt;here&lt;/a&gt;. I recommend installing it with Brew if you’re on OSX and checking your package manager if you’re running Linux.&lt;/p&gt;

&lt;h4 id="push-to-heroku"&gt;6. Push to Heroku!&lt;/h4&gt;
&lt;p&gt;Now assuming you are already setup with get, you shoud be able to make your project Heroku ready by running &lt;code&gt;heroku create [Your App Name]&lt;/code&gt;. Then to make it live run &lt;code&gt;git push heroku master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now test your site by going to &lt;code&gt;[Your App Name].herokuapp.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For more generalized Heroku deployment guidance &lt;a target="_blank" href="https://devcenter.heroku.com/articles/git"&gt;checkout their docs.&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bugfix: FooTable</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/bugfix-footable/"/>
    <id>http://dropofwill.herokuapp.com/2014/bugfix-footable/</id>
    <published>2014-09-24T01:43:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;Everyone in the frontend community likes to hate on tables, it’s like Comic Sans in the design community. And this is for mostly good reasons, tables for layouts are pretty much unnecessary in this day in age (unless you’re looking to center something vertically, &lt;a target="_blank" href="http://css-tricks.com/centering-in-the-unknown/"&gt;then &lt;em&gt;maybe&lt;/em&gt; you can use it in your CSS, not the markup&lt;/a&gt;), but there are still actually legitimate uses of tables. You know like for tabular data.&lt;/p&gt;

&lt;p&gt;Unfortunately the default HTML tables aren’t really that great from a UX perspective. From a functional standpoint there’s no way to sort or filter data and from a design perspective it definitely still looks like something from the 90s. Now try loading that 90s era table of data with more than four columns of data on your phone, things start to get bad fast.&lt;/p&gt;

&lt;p&gt;That’s where &lt;a target="_blank" href="https://github.com/bradvin/FooTable"&gt;FooTables&lt;/a&gt; comes in. It’s a &lt;a target="_blank" href="https://github.com/jquery/jquery"&gt;JQuery&lt;/a&gt; plugin that makes your data tables responsive with custom breakpoints, gives you some default styles that don’t suck if you want them, and offers tons of new functionality, like filtering, sorting, pagination, and more. I’ve used on numerous occasions with great success, so when I got a job that needed to display a lot of tabular data to users (a lot of which who were mobile users), I decided to use FooTables.&lt;/p&gt;

&lt;h3 id="a-tale-of-two-bugs"&gt;A Tale of Two Bugs&lt;/h3&gt;

&lt;p&gt;But when I went to include it on my page nothing happened, I just had the same old ugly table. Pop open the console and there were a bunch of &lt;code&gt;ReferenceErrors&lt;/code&gt; coming from the FooTables source. After digging around in the source code a bit I noticed a number of instances where variables were being defined without the &lt;code&gt;var&lt;/code&gt; keyword, like so:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function someScope() {
  newVar = foo;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In most cases this is no big deal, newVar will still be given the value foo. However, it will be added to the global scope instead of inside the scope it was defined in. So the above is the equivalent to:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Assuming this isn't nested in another function
var newVar;
function someScope() {
  newVar = foo;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s usually not what you intend and if it is, you should probably be doing it explicitly so that other readers can understand what your doing:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Again assuming no nesting
// `this` in the top-level refers to the window/global object
var global = this;
function someScope() {
  global.newVar = foo;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But anyways, back to FooTables, it worked before, right? Why was it failing now? Well, this part was my fault. You see with &lt;a target="_blank" href="http://kangax.github.io/compat-table/es5/"&gt;ECMAScript&lt;/a&gt; 5 came a &lt;a target="_blank" href="http://perldoc.perl.org/strict.html"&gt;Perl like convention of “strict”&lt;/a&gt; mode, &lt;a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"&gt;this does a lot of things&lt;/a&gt;, but the gist of it is things that worked before or failed silently would no longer be allowed in the interest of a more stable software platform. One of the items that changed was that global variables could only be assigned like the third example, and when you use that first method, yep, you guessed it, JavaScript throws a &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At first this may seem like a terrible mistake, now perfectly good programs will fail. That might not sound like much of a stability boost to you. But the folks working on the spec thought of that as well. It turns out that setting strict mode works just like variables, &lt;em&gt;it only applies to the scope it’s defined in.&lt;/em&gt; So:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Strict mode for all the things!
"use strict";
function someScope() {
  // This will be strict as well
}
-----
// Not strict
function someScope() {
  "use strict";
  // items in this scope and nested below will be treated with strict mode
}
// Not strict
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So best JavaScript practice is to define strict mode only in scopes that you are responsible for, otherwise you might break third party libraries. And that’s exactly the route I took on the aforementioned project (which you can see the relevant table bits for &lt;a target="_blank" href="http://www.demandingjustice.org/states/new-york/"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id="a-wild-bugfix-appears"&gt;A Wild Bugfix Appears&lt;/h3&gt;

&lt;p&gt;But why not fix the other problem too? There’s no reason FooTables shouldn’t be strict mode compliant and it seemed like a pretty easy fix. So I forked the repo and dove in.&lt;/p&gt;

&lt;p&gt;Looking around a bit I found that it was managed with &lt;a target="_blank" href="https://www.npmjs.org/doc/"&gt;npm&lt;/a&gt;, distributed with &lt;a target="_blank" href="http://bower.io/"&gt;Bower&lt;/a&gt;, and used &lt;a target="_blank" href="http://gruntjs.com/"&gt;Grunt&lt;/a&gt; to run the build and testing step. The files I need to edit were going to be located in the &lt;code&gt;js/&lt;/code&gt; directory, but first before I started messing around with the project internals I figured I better install the project’s dependencies.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install

npm ERR! install Couldn't read dependencies
npm ERR! Darwin 13.3.0
npm ERR! argv "node" "/usr/local/bin/npm" "install"
npm ERR! node v0.10.32
npm ERR! npm  v2.0.0

npm ERR! Invalid version: "2.0.1.5"
npm ERR!
npm ERR! If you need help, you may report this error at:
npm ERR!     &amp;lt;http://github.com/npm/npm/issues&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah, the classic npm err. I’ve spent countless hours debugging npm dependency errors in the past and a lot of times the solution is just to reinstall npm. So without even bothering to read the error messages I blindly upgraded npm:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew info npm
...
$ brew upgrade npm
==&amp;gt; Upgrading 1 outdated package, with result:
...
$ npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But to no avail. I decided to check the error log a little closer:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm ERR! Invalid version: "2.0.1.5"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahah! npm requires &lt;a target="_blank" href="http://semver.org/"&gt;semantic versioning&lt;/a&gt;, which means version numbers must follows the pattern: MAJOR.MINOR.PATCH-pre-release-label. After taking a look at the git history of the &lt;code&gt;package.json&lt;/code&gt; file where npm defines the version, it seemed like an appropriate semantic version would be 2.0.2 instead of 2.0.1.5. I edited the &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;bower.json&lt;/code&gt; to reflect this and submitted a &lt;a target="_blank" href="https://github.com/bradvin/FooTable/pull/276"&gt;pull request&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;a target="_blank" href="https://travis-ci.org/"&gt;Travis.ci&lt;/a&gt; was setup on the project I went to watch my pull request be tested. Once it passed I went back to the pull requests page to review my submission. But it was no where to be found. Confused I hopped around from issues to pull requests wondering what happened. Finally I clicked on the “Closed” link on the pull requests page only to find he had already merged my pull request. A mere two minutes after I made it, at 1am on a Wednesday. Talk about a responsive upstream!&lt;/p&gt;

&lt;p&gt;With that bug squashed I returned to my original mission. Finding all the violations of strict mode was as simple as running &lt;a target="_blank" href="https://github.com/jshint/jshint/"&gt;JSHint&lt;/a&gt; in my editor (&lt;a target="_blank" href="https://github.com/scrooloose/syntastic"&gt;Vim, Syntastic plugin&lt;/a&gt;) and exploring the context of each warning to make sure what I was doing wasn’t actually breaking anything. That done, I looked at the Gruntfile to see what sort of build tasks were setup. Turns out the default task ran everything, so I just ran &lt;code&gt;grunt&lt;/code&gt; and all the js tests passed and the builds completed. Strangely the LESS didn’t compile to the same as the prior CSS (even though I hadn’t changed anything) and the CSS linter threw a couple of errors. But that’s a bug fix for another day. I committed just the JavaScript files to another feature branch and submitted my &lt;a target="_blank" href="https://github.com/bradvin/FooTable/pull/277"&gt;second pull request of the evening.&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Creating and Deploying a Middleman Blog, Part 2: Blogging with Middleman</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/creating-and-deploying-a-middleman-blog-part-2-blogging-with-middleman/"/>
    <id>http://dropofwill.herokuapp.com/2014/creating-and-deploying-a-middleman-blog-part-2-blogging-with-middleman/</id>
    <published>2014-09-21T22:06:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="/2014/09/14/creating-and-deploying-a-middleman-blog-part-1-what-s-middleman/"&gt;Last time&lt;/a&gt; I talked about static site generators in general (why you would use them) and a little bit about Middleman specifically (why you would use it in particular). Today I am going to talk about Middleman’s blogging capabilities.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id="prepping-your-middleman-for-blogging"&gt;Prepping your Middleman for Blogging&lt;/h3&gt;

&lt;p&gt;Middleman doesn’t ship with blogging capabilities, but this wasn’t an oversight, it was by design. Trying to follow the Unix principle of &lt;a target="_blank" href="http://en.wikipedia.org/wiki/Unix_philosophy#Doug_McIlroy_on_Unix_programming"&gt;do one thing, and do it well&lt;/a&gt;, the Middleman core contains only what is required to run any Middleman site. The blogging features our definitely out of that scope so they’re placed in their own gem, maintained by the same people that work on the core.&lt;/p&gt;

&lt;p&gt;So you might be thinking that sounds great and all, but how much work is it to get setup? Thankfully it’s super easy. Just add this to you Gemfile:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem "middleman-blog", "~&amp;gt; 3.5"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;code&gt;bundle install&lt;/code&gt; and you are all set to go.&lt;/p&gt;

&lt;p&gt;To activate it add this block to your config.rb:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="ss"&gt;:blog&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# set options on blog&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this method lets you take a more hands on look at the relevant setup, if this is your first rodeo with a static generated blog I recommend using the built in blog template (or one of the &lt;a target="_blank" href="http://directory.middlemanapp.com/#/templates/blog"&gt;community submitted templates&lt;/a&gt;) Just to get a better feel for what options are available.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;middleman init project-name --template=blog
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="markdown-and-frontmatter"&gt;Markdown and Frontmatter&lt;/h3&gt;

&lt;p&gt;In Middleman blog articles are generally written in whatever flavor of Markdown you like (or &lt;a target="_blank" href="http://rriemann.github.io/middleman-blog-template-duocolor/demo/"&gt;LaTeX if that’s more your style&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Frontmatter is YAML or JSON that you can include at the top of your markdown pages (or any page) to set local variables to access with your templates and layouts. A common use of this is to set the title of a page or in a blog context set tags and date information. For instance, on this blog I use YAML and the Frontmatter for this post looks as folows:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
title: "Creating and Deploying a Middleman Blog, Part 2: Blogging with Middleman"
date: 2014-09-22 02:06 UTC
tags: Ruby, Middleman, Blog
summary: "Last time I talked about static site generators in general (why you would use them) and a little bit about Middleman specifically (why you would use it in particular). Today I am going to talk about Middleman's blogging capabilities."
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you might be thinking cool, but that looks like a bit of a pain to have to type out, esp. the date. How do you remember to format that? The answer is I don’t, instead I use a middleman scaffolding feature to give me the barebones of an article to start with:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;middleman article "Title" [optional args]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course all this can be configured in your config.rb, but chances are the defaults will get you mostly where you want to go (convention over configuration ftw!).&lt;/p&gt;

&lt;h3 id="what-about-feature-x"&gt;What About Feature X?&lt;/h3&gt;

&lt;p&gt;No doubt you have qualms about ditching the backend completely for something even as simple as a blog. What if in the future I want to implement a tag cloud, or calendar, or whatever? First let me direct you to the &lt;a href="http://middlemanapp.com/basics/blogging/"&gt;middleman-blog documentation page&lt;/a&gt;, which shows you how to do just about everything that WordPress does out of the box (feeds, pagination, calendar, etc).&lt;/p&gt;

&lt;p&gt;But what I think is really important to highlight is that you are not really abandoning the backend, the code you write for Middleman can look practically the same as you Rails code, what really is happening is we’re moving the backend into a preprocessing step saving not just developer time, but CPU time as well. It’s a bit of a paradigm shift for sure and certainly isn’t for every or even most situations (just see my last post), but I think personal blogging is an domain where it really shines. Especially for developers who want to have control over the stack, but don’t want to mess around learning the idiosyncrasies of Drupal or WordPress.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Creating and Deploying a Middleman Blog, Part 1: What's Middleman?</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/creating-and-deploying-a-middleman-blog-part-1-what-s-middleman/"/>
    <id>http://dropofwill.herokuapp.com/2014/creating-and-deploying-a-middleman-blog-part-1-what-s-middleman/</id>
    <published>2014-09-14T18:07:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;This is the first in what will probably be a three part series on creating and deploying a &lt;a target="_blank" href="https://github.com/middleman/middleman"&gt;Middleman&lt;/a&gt; site, specifically a blog deployed to a &lt;a target="_blank" href="https://devcenter.heroku.com/start"&gt;Heroku&lt;/a&gt; instance.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id="where-were-going-in-the-next-couple-of-posts"&gt;Where we’re going in the next couple of posts:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href="/2014/09/14/creating-and-deploying-a-middleman-blog-part-1-what-s-middleman/"&gt;What’s Middleman?&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href="/2014/09/22/creating-and-deploying-a-middleman-blog-part-2-blogging-with-middleman/"&gt;Blogging with Middleman&lt;/a&gt;&lt;/strong&gt;
3.-&lt;strong&gt;&lt;a href="/2014/09/29/creating-and-deploying-a-middleman-blog-part-3-deployment"&gt;Deploying&lt;/a&gt;
)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="whats-middleman"&gt;What’s Middleman?&lt;/h3&gt;

&lt;p&gt;Middleman is a static site generator built in the programming language of &lt;a target="_blank" href="https://www.ruby-lang.org/en/"&gt;Ruby&lt;/a&gt; and the &lt;a target="_blank" href="http://rack.github.io/"&gt;Rack&lt;/a&gt; interface. As a generator it allows you to use features of “modern web development” that you would expect in a backend framework without the extra overhead of database. It also comes packaged with a “server” that runs on Rack, designed to be run in development so you can see your changes live instead of having to rebuild every time. But as we’ll see in a later post you can also use this to run Middleman in production to host on a site like Heroku.&lt;/p&gt;

&lt;h3 id="why-and-when-to-use-a-static-site-generator"&gt;Why and When to Use a Static Site Generator?&lt;/h3&gt;

&lt;p&gt;So why even bother with a static site generator, doesn’t it just add needless complexity? Another point of failure? To some extent yes. You need to weigh your options, but here’s the thing: if you’re building a site with more than 4 or 5 pages without some sort of templating system, the time sink won’t be problems with your generator, it’s going to be changing the verbiage in the footer for the tenth time or something equally stupid.&lt;/p&gt;

&lt;p&gt;The way I see it you have 4 basic options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Play it close to the metal use a programming or web server for dynamic content directly (e.g. &lt;a target="_blank" href="http://php.net/"&gt;PHP&lt;/a&gt; or &lt;a target="_blank" href="http://httpd.apache.org/"&gt;Apache&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Get a little help from a framework and templating language to standardize your setup (e.g. &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;,{:target=”_blank”} &lt;a target="_blank" href="http://codex.wordpress.org/Developer_Documentation"&gt;Wordpress&lt;/a&gt;, &lt;a target="_blank" href="http://slim-lang.com/"&gt;Slim&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Use a task runner to manage the repetitive or laborious tasks for you (e.g. &lt;a target="_blank" href="http://gruntjs.com/"&gt;Grunt&lt;/a&gt; or &lt;a target="_blank" href="http://www.gnu.org/software/make/"&gt;Make&lt;/a&gt;/&lt;a target="_blank" href="https://github.com/jimweirich/rake"&gt;Rake&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Use a static site generator (e.g. &lt;a target="_blank" href="https://github.com/middleman/middleman"&gt;Middleman&lt;/a&gt;, &lt;a target="_blank" href="https://github.com/jekyll/jekyll"&gt;Jekyll&lt;/a&gt;, or &lt;a target="_blank" href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Obviously, these are extremely loose distinctions and there certainly can be overlap between them (e.g. using Grunt with Slim or Mustache is something I’ve done on many occasions).&lt;/p&gt;

&lt;p&gt;IMO, 1 is a dangerous game unless you’re working alone &lt;em&gt;and&lt;/em&gt; know what you’re doing. Even so, tying your markup to one language or even worse one web server seems like a bad idea. What if later on you realize running &lt;a target="_blank" href="http://nginx.com/"&gt;NGINX&lt;/a&gt; for your web server would lead to a noticeable speed boost. Suddenly all those Apache specific &lt;a target="_blank" href="http://httpd.apache.org/docs/current/howto/ssi.html"&gt;Server Side Includes&lt;/a&gt; are broken and you’re back to editing every single template again.&lt;/p&gt;

&lt;p&gt;2 is a good choice if you know where a project is headed long term, though there is quite a bit of technical debt to take on when starting a project like this, depending on what choices you make. Though this subsides with experience in the framework, for instance while it seems like a poor idea I wouldn’t mind prototyping the frontend of a project in Rails, because I’ve built so many sites with it over the past couple of years. But ask me to do that with say Wordpress or Django it would be a different story, it would just be too much of a waste of time if we weren’t completely sure what the final backend would be and even then I probably would rather not.&lt;/p&gt;

&lt;p&gt;That’s kind of where 3 comes in, it’s the middle ground, a good place to start prototyping a project when you don’t know where it’s actually going to end up. Most templating languages or implemented in all the modern web languages so pick one with good support and you’re code base remains portable from web server to programming language.&lt;/p&gt;

&lt;p&gt;So where does this leave Middleman and company? It’s kind of a niche market to be honest, it’s for situations where developers or at least technically savvy individuals are going to be editing content (it’s all templates and markdown, no pretty CMS to hold your hand) and where your sure you won’t be adding a backend at a later date. So generally what we’re looking at are personal sites and project sites. One advantage here is the ease of use, while perfecting a Gruntfile can be an arduous task, with something like Middleman it can be as simple as &lt;code&gt;middleman init&lt;/code&gt; and you’re off and running.&lt;/p&gt;

&lt;h3 id="why-middleman"&gt;Why Middleman?&lt;/h3&gt;

&lt;p&gt;Why Middleman specifically and not Jekyll or &lt;a target="_blank" href="http://hexo.io/"&gt;Hexo&lt;/a&gt; or one of &lt;a target="_blank" href="http://staticsitegenerators.net/"&gt;hundreds of other generators&lt;/a&gt; popping up all over the web? Well, for me personally it’s because Middleman models itself after Rails and that’s just what I was familiar with so I gave it a shot. To be honest I’ve only messed around with &lt;a target="_blank" href="http://hugo.spf13.com/"&gt;Hugo&lt;/a&gt; and &lt;a target="_blank" href="https://github.com/bmcmurray/hekyll"&gt;Hekyll&lt;/a&gt; (as a way to mess around with Go and Haskell respectively), so I can’t definitively say that Middleman is particularly better (and if you want to publish to Github pages Jekyll probably seems like the better integrated option…).&lt;/p&gt;

&lt;p&gt;So what Rails features carry over? The main tenant of Rails development is “convention over configuration”, basically most people are trying to do similar things with their web frameworks, so why not pre-configure everything to work out of the box and sprinkle in some best practices along the way? This mantra is alive and well in the Middleman community and for the most part you probably won’t make that many changes in the &lt;code&gt;config.rb&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Like Rails, Middleman ships with Erb, Sass, and CoffeeScript support, as well as the prettier (&lt;a target="_blank" href="http://sephinrothcn.wordpress.com/2014/04/14/slim-vs-haml-performance-perspective/"&gt;but awfully slow&lt;/a&gt;) Haml and the Markdown engine &lt;a target="_blank" href="http://kramdown.gettalong.org/"&gt;Kramdown (the fastest ruby implementation, with some nice extra features)&lt;/a&gt;. However, if you prefer logicless templates like me it’s trivial to add Slim support or a different markdown engine or whatever.&lt;/p&gt;

&lt;p&gt;Also like Rails you get an Asset Pipeline complete with &lt;a target="_blank" href="https://github.com/sstephenson/sprockets"&gt;Sprockets&lt;/a&gt; for file concatenation so you can keep your JavaScript under control in multiple files. One advantage of this setup is you can turn on cache busting which appends a unique number to the end of each asset url that changes whenever the asset changes so no more asking a client to clear their cache or anything like that. You can also lock into the pipeline with an image compressor that will automatically make sure none of your images make it into production any larger than they need to be.&lt;/p&gt;

&lt;p&gt;Other features like local data (they call it Frontmatter), dynamic pages (we’ll talk more about this with the blog plugin later), localization, routes, and more are all at your finger tips. If you would like to dive in check out the Getting Started page or try out a template like &lt;a target="_blank" href="https://github.com/dropofwill/middleman-slim"&gt;my Bower/Slim setup&lt;/a&gt; or one from the &lt;a target="_blank" href="http://directory.middlemanapp.com/#/templates/all"&gt;ever growing official list&lt;/a&gt; or make your own it’s super easy.&lt;/p&gt;

&lt;p&gt;Until next time happy hacking!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Run Processing Sketches from Vim</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/run-processing-sketches-from-vim/"/>
    <id>http://dropofwill.herokuapp.com/2014/run-processing-sketches-from-vim/</id>
    <published>2014-09-07T23:09:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;p&gt;So I started writing Processing for one of my classes (Interactive Media Development) and unfortunately the default development workflow they want us to use is tightly bound to the IDE that it ships with. In general I’m not a huge fan of IDEs anyways, but the Processing one is especially terrible. It’s obviously been designed to abstract away programming concepts to make the barrier to entry really low (I think it was originally made to help artist make procedural art), but in the end this makes for an annoying experience for those of us with a bit of experience.&lt;/p&gt;

&lt;p&gt;On top of this over the last year or so I have become attached to Vim as my go to editor. So when I start writing in the Processing IDE my code ends up littered with &lt;code&gt;wwwweajjl&lt;/code&gt; or &lt;code&gt;:w&lt;/code&gt; and the like. So when I found out that there was a command line program to run a sketch I jumped at the opportunity to add it into my Vim workflow.&lt;/p&gt;

&lt;p&gt;Supposedly if you are running the Windows or Linux versions of Processing the command line bit comes pre-installed, but I haven’t had a chance to test that out for myself yet so you may need to experiment with that. &lt;a target="_blank" href="https://github.com/processing/processing/wiki/Command-Line"&gt;On OSX there is an option to enable it in the tools menu.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then add this Automatic Command Group to your .vimrc:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;augroup processing
	autocmd!
	autocmd BufNewFile,BufRead *.pde setlocal filetype=java
	autocmd Filetype java :command! Pj :!processing-java --run --sketch=$(pwd) --output=$(pwd)/tmp --force
	autocmd Filetype java :command! Pjf :!processing-java --present --sketch=$(pwd) --output=$(pwd)/tmp --force
	autocmd Filetype java :command! Pjb :!processing-java --present --sketch=$(pwd) --output=$(pwd)/tmp --force
augroup END
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see I’ve defined a couple of different commands to use. To run the sketch windowed type &lt;code&gt;:Pj&lt;/code&gt;, for full screen type &lt;code&gt;:Pjf&lt;/code&gt;, and to build the application type &lt;code&gt;:Pjb&lt;/code&gt;. Obviously feel free to change the relevant commands to whatever you like, just remember user defined commands have to start with a capital letter.&lt;/p&gt;

&lt;p&gt;Stepping through the code here we’re defining a group of Auto Commands to run together, I arbitrarily named it processing just for organizational purposes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;autocmd!&lt;/code&gt; resets the previous Auto commands so when you’re jumping through multiple files vim won’t yell at you about overwriting the previous commands.&lt;/p&gt;

&lt;p&gt;Next we’re telling vim that pde files are really java. Before finally setting our custom commands. &lt;code&gt;:!&lt;/code&gt; is how you execute shell commands from vim, so we’re basically telling vim to run &amp;lt;codeprocessing-java&amp;lt;/code&amp;gt; in the current directory (&lt;code&gt;$(pwd)&lt;/code&gt;) and write to a directory arbitrarily named tmp.&lt;/p&gt;

&lt;p&gt;And that’s all you need to start writing Processing sketches from a Vim session.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Review: What Is Open Source and How Does it Work?</title>
    <link rel="alternate" href="http://dropofwill.herokuapp.com/2014/review-what-is-open-source-and-how-does-it-work/"/>
    <id>http://dropofwill.herokuapp.com/2014/review-what-is-open-source-and-how-does-it-work/</id>
    <published>2014-09-07T15:42:00-04:00</published>
    <updated>2015-12-17T15:51:37-05:00</updated>
    <author>
      <name>Will Paul</name>
    </author>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Who:&lt;/strong&gt; &lt;a target="_blank" href="http://en.wikipedia.org/wiki/Steven_Weber_(professor)"&gt;Steven Weber&lt;/a&gt;, a Political Science Professor at University of California, Berkeley.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;What/Where:&lt;/strong&gt; &lt;a target="_blank" href="http://hfoss-fossrit.rhcloud.com/static/books/Weber-SuccessofOpenSource-Chap3.pdf"&gt;What is Open Source and How Does it Work?&lt;/a&gt;, which is Chapter 3 from &lt;a target="_blank" href="http://smile.amazon.com/Success-Open-Source-Steven-Weber/dp/0674018583/ref=smi_www_rcolv2_go_smi?_encoding=UTF8&amp;amp;*Version*=1&amp;amp;*entries*=0"&gt;The Success of Open Source&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; Published: November 30th, 2005&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id="the-gist"&gt;The Gist&lt;/h3&gt;

&lt;p&gt;Weber introduces the topic by talking about the success of Linux and asks why would people do hard work for free? A question that classical economics doesn’t have an answer for. He thinks that the answer lies in the people and the process, not the particular problem or domain. First he looks at an idealized project (“ideal-typical”), before moving onto more concrete examples (&lt;a target="_blank" href="https://github.com/torvalds/linux"&gt;Linux&lt;/a&gt;, &lt;a target="_blank" href="http://httpd.apache.org/"&gt;Apache&lt;/a&gt;, &lt;a target="_blank" href="https://github.com/Debian"&gt;Debian&lt;/a&gt;, etc.). Along the way presenting data on these projects and the community as a whole (who contributes, how do they collaborate/share, how do they settle conflicts, etc.).&lt;/p&gt;

&lt;p&gt;Along the way he presents 8 guiding principles to open source projects, which is probably a better summary of this chapter than what I just gave:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make it interesting and make sure it happens&lt;/li&gt;
  &lt;li&gt;Scratch an itch&lt;/li&gt;
  &lt;li&gt;Minimize how many times you have to reinvent the wheel&lt;/li&gt;
  &lt;li&gt;Solve problems through parallel work process whenever possible&lt;/li&gt;
  &lt;li&gt;Leverage the law of large numbers&lt;/li&gt;
  &lt;li&gt;Document what you do&lt;/li&gt;
  &lt;li&gt;Release early and release often&lt;/li&gt;
  &lt;li&gt;Talk a lot&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="the-good"&gt;The Good&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Weber contrasts various leadership styles within the FOSS community really drives home just how diverse the FOSS community is. Between Linus’s pragmatic approach (&lt;a target="_blank" href="https://github.com/torvalds/linux"&gt;Linux&lt;/a&gt;, &lt;a target="_blank" href="https://github.com/git/git"&gt;Git&lt;/a&gt;) to Stallman’s ethics first perspective  (&lt;a target="_blank" href="https://www.fsf.org/"&gt;Free Software Foundation&lt;/a&gt;) to Behlendorf focus on the business model (&lt;a target="_blank" href="http://httpd.apache.org/"&gt;Apache&lt;/a&gt;), to &lt;a target="_blank" href="http://www.bsd.org/"&gt;BSD’s&lt;/a&gt; to layered command, shows four completely different approaches running some of the  most successful open source projects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As a newish developer sometimes it’s easy to forget there was a time before Github (I was fifteen and just starting to mess around with HTML when it launched). While it would be nice if this chapter was updated to talk a little bit about newer trends, it’s interesting to look back how the community used to work and how much of that continues on (mailing lists, IRC, etc.).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All that data. Some people may complain about how long this chapter is or how much data it goes over, but I think that’s what sets this apart from other sources on this topic. Yeah, some of the charts could use some work, but that fact that he makes arguments based on data (and not the other way round), gives him points from me.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="the-bad"&gt;The Bad&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2005 doesn’t seem that long ago, but it’s an eternity in a field as fast moving as software. I have a feeling the rest of the book is a bit more timeless, but since this chapter deals with so much history it’s bound to feel like it’s missing a section or two at the end.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I think this chapter bit off a little more than it could chew with the title, “What Is Open Source and How Does it Work”. I’m basing this assertion on the fact that the conclusion was basically: let’s look at the next two chapters to actually answer the question. I think breaking it down a little bit would afford Weber the space to really flesh out all these ideas concretely. As is it sometimes feels like we’re jumping about too much, or maybe that’s just my ever shrinking attention span.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One specific example where I would have liked to hear more discussion was around the BSD vs. GPL, Debian vs Free Software Foundation, or perhaps more concretely, the open source and commercial software debate. Should software developers remove roadblocks to using open source software at the expense of mixing with commercial software?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="questions"&gt;Questions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Why bother with intellectual property at all? Obviously, there is value in a &lt;a target="_blank" href="http://choosealicense.com/licenses/gpl-2.0/"&gt;GPL&lt;/a&gt; (&lt;a target="_blank" href="http://en.wikipedia.org/wiki/Copyleft"&gt;“copyleft”&lt;/a&gt;) mentality, but I don’t understand why &lt;a target="_blank" href="http://choosealicense.com/licenses/isc/"&gt;BSD&lt;/a&gt; license for example is necessary. If you don’t care if your stuff goes into proprietary/closed source code, why not &lt;a target="_blank" href="http://choosealicense.com/licenses/unlicense/"&gt;“unlicense”&lt;/a&gt; it and put into the public domain?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What aspect of software makes it a breeding ground for open source projects? Is it because it’s a public good (freely available) or non-rivalous good (consumption does not reduce the amount available to others) or it attracts a certain type of individual or something else?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Corollary to the above question: how portable is this model of collaboration? By that I mean how far away from software can it still be an effective tool? Hardware? Manufacturing? Food?..&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="review"&gt;Review&lt;/h3&gt;

&lt;p&gt;Excellent read that gives a lot of data-driven insight. This one chapter has put the book into my ever expanding queue of books to read when I have a bit of free time. I think it is an important read for anyone interested in open source software, or even management of software or business in general.&lt;/p&gt;

&lt;p&gt;Rating 5/5&lt;/p&gt;
</content>
  </entry>
</feed>
